syntax = "proto3";

import "google/api/annotations.proto";
import "common.proto";

option go_package = "github.com/sekirocc/face-recognition-service/feature_search";
// option java_package = "com.sekirocc.face_recognition_service";

package com.sekirocc.feature_search;

// DB managment
message DBNewRequest {
    string name = 1;
    int64 capacity = 2;
    string description = 3;
}

message DBNewResponse {
    com.sekirocc.common.ResultCode code = 1;
    string db_id = 2;
}

message DBItem {
    string db_id = 1;
    string name = 2;
    int64 capacity = 3;
    int64 used = 4;
    string description = 5;
}

message DBListRequest {}

message DBListResponse {
    com.sekirocc.common.ResultCode code = 1;
    repeated DBItem dbs = 2;
}

message DBGetRequest { string db_id = 1; }

message DBGetResponse {
    com.sekirocc.common.ResultCode code = 1;
    DBItem db = 2;
}

message DBDeleteRequest { string db_id = 1; }

message DBDeleteResponse { com.sekirocc.common.ResultCode code = 1; }

// Search Service
message TrainIndexRequest { string db_id = 1; }

message TrainIndexResponse { com.sekirocc.common.ResultCode code = 1; }

message AddFeatureItem {
    com.sekirocc.common.FaceFeature feature = 1;
    map<string, string> meta = 2;
}

message AddFeatureRequest {
    string db_id = 1;
    AddFeatureItem feature_item = 2;
}

message AddFeatureResponse {
    com.sekirocc.common.ResultCode code = 1;
    string feature_id = 2;
}

message DeleteFeatureRequest {
    string db_id = 1;
    string feature_id = 2;
}

message DeleteFeatureResponse { com.sekirocc.common.ResultCode code = 1; }

message SearchFeatureRequest {
    repeated string db_id = 1;
    com.sekirocc.common.FaceFeature query = 2;
    int32 topk = 3;
}

message SearchItemScore {
    string db_id = 1;
    com.sekirocc.common.FaceFeature feature = 2;
    float score = 3;
}

message SearchFeatureResponse {
    com.sekirocc.common.ResultCode code = 1;
    repeated SearchItemScore items = 2;
}

// feature search service
service FeatureSearch {

    rpc DBNew(DBNewRequest) returns (DBNewResponse) {
        option (google.api.http) = {
            post : "/db_new"
            body : "*"
        };
    }

    rpc DBList(DBListRequest) returns (DBListResponse) {
        option (google.api.http) = {
            post : "/db_list"
            body : "*"
        };
    }

    rpc DBGet(DBGetRequest) returns (DBGetResponse) {
        option (google.api.http) = {
            post : "/db_get"
            body : "*"
        };
    }

    rpc DBDelete(DBDeleteRequest) returns (DBDeleteResponse) {
        option (google.api.http) = {
            post : "/db_delete"
            body : "*"
        };
    }

    rpc AddFeature(AddFeatureRequest) returns (AddFeatureResponse) {
        option (google.api.http) = {
            post : "/add_feature"
            body : "*"
        };
    }

    rpc DeleteFeature(DeleteFeatureRequest) returns (DeleteFeatureResponse) {
        option (google.api.http) = {
            post : "/delete_feature"
            body : "*"
        };
    }

    rpc SearchFeature(SearchFeatureRequest) returns (SearchFeatureResponse) {
        option (google.api.http) = {
            post : "/search_feature"
            body : "*"
        };
    }
}
