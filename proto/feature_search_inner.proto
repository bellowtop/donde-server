syntax = "proto3";

import "google/api/annotations.proto";
import "common.proto";

option go_package = "github.com/sekirocc/face-recognition-service/feature_search/inner";
// option java_package = "com.sekirocc.face_recognition_service";

package com.sekirocc.feature_search.inner;

// Worker service
message AssignDBShardsRequest {
  string db_id = 1;
  repeated string shard_ids = 2;
}

message AssignDBShardsResponse { com.sekirocc.common.ResultCode code = 1; }

// Worker service
message GetSystemInfoRequest {}

message WorkerInfo {
    // TODO
  int64 capacity = 1;
  string device = 2;
}

message GetSystemInfoResponse {
    com.sekirocc.common.ResultCode code = 1;
    repeated com.sekirocc.common.DBItem dbs = 2;
    WorkerInfo worker_info = 3;
}

message TrainIndexRequest {}

message TrainIndexResponse { com.sekirocc.common.ResultCode code = 1; }

message AddFeatureItem {
    com.sekirocc.common.FaceFeature feature = 1;
    map<string, string> meta = 2;
}

message BatchAddFeaturesRequest {
    string db_id = 1;
    repeated AddFeatureItem feature_items = 2;
}

message BatchAddFeaturesResponse {
    com.sekirocc.common.ResultCode code = 1;
    repeated string feature_ids = 2;
}

message BatchDeleteFeaturesRequest {
    string db_id = 1;
    repeated string feature_ids = 2;
}

message BatchDeleteFeaturesResponse { com.sekirocc.common.ResultCode code = 1; }

message SearchFeatureRequest {
    repeated string db_ids = 1;
    com.sekirocc.common.FaceFeature query = 2;
    int32 topk = 3;
}

message SearchItemScore {
    string db_id = 1;
    com.sekirocc.common.FaceFeature feature = 2;
    float score = 3;
}
message SearchFeatureResponse {
    com.sekirocc.common.ResultCode code = 1;
    repeated SearchItemScore items = 2;
}

// feature search service
service FeatureSearchWorker {

    rpc GetSystemInfo(GetSystemInfoRequest) returns (GetSystemInfoResponse) {
        option (google.api.http) = {
            post : "/get_system_info"
            body : "*"
        };
    }

    // assign some dbs to this worker, then it's the worker's duty to manage those databases(add,
    // search etc.) must be called once.
    rpc AssignDBShards(AssignDBShardsRequest) returns (AssignDBShardsResponse) {
        option (google.api.http) = {
            post : "/assign_db_shards"
            body : "*"
        };
    }

    // trigger train index job, for maintaince
    rpc TrainIndex(TrainIndexRequest) returns (TrainIndexResponse) {
        option (google.api.http) = {
            post : "/train_index"
            body : "*"
        };
    }

    // add feature to db
    rpc BatchAddFeatures(BatchAddFeaturesRequest) returns (BatchAddFeaturesResponse) {
        option (google.api.http) = {
            post : "/batch_add_features"
            body : "*"
        };
    }

    rpc BatchDeleteFeatures(BatchDeleteFeaturesRequest) returns (BatchDeleteFeaturesResponse) {
        option (google.api.http) = {
            post : "/batch_delete_features"
            body : "*"
        };
    }

    rpc SearchFeature(SearchFeatureRequest) returns (SearchFeatureResponse) {
        option (google.api.http) = {
            post : "/search_feature"
            body : "*"
        };
    }
}
