// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feature_search_inner.proto

#include "feature_search_inner.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace sekirocc {
namespace feature_search {
namespace inner {
PROTOBUF_CONSTEXPR AssignDBShardsRequest::AssignDBShardsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shard_ids_)*/{}
  , /*decltype(_impl_.db_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssignDBShardsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssignDBShardsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssignDBShardsRequestDefaultTypeInternal() {}
  union {
    AssignDBShardsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssignDBShardsRequestDefaultTypeInternal _AssignDBShardsRequest_default_instance_;
PROTOBUF_CONSTEXPR AssignDBShardsResponse::AssignDBShardsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssignDBShardsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssignDBShardsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssignDBShardsResponseDefaultTypeInternal() {}
  union {
    AssignDBShardsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssignDBShardsResponseDefaultTypeInternal _AssignDBShardsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetSystemInfoRequest::GetSystemInfoRequest(
    ::_pbi::ConstantInitialized) {}
struct GetSystemInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSystemInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSystemInfoRequestDefaultTypeInternal() {}
  union {
    GetSystemInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSystemInfoRequestDefaultTypeInternal _GetSystemInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR WorkerInfo::WorkerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.capacity_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkerInfoDefaultTypeInternal() {}
  union {
    WorkerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkerInfoDefaultTypeInternal _WorkerInfo_default_instance_;
PROTOBUF_CONSTEXPR GetSystemInfoResponse::GetSystemInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dbs_)*/{}
  , /*decltype(_impl_.worker_info_)*/nullptr
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSystemInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSystemInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSystemInfoResponseDefaultTypeInternal() {}
  union {
    GetSystemInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSystemInfoResponseDefaultTypeInternal _GetSystemInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR TrainIndexRequest::TrainIndexRequest(
    ::_pbi::ConstantInitialized) {}
struct TrainIndexRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrainIndexRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrainIndexRequestDefaultTypeInternal() {}
  union {
    TrainIndexRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrainIndexRequestDefaultTypeInternal _TrainIndexRequest_default_instance_;
PROTOBUF_CONSTEXPR TrainIndexResponse::TrainIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrainIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrainIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrainIndexResponseDefaultTypeInternal() {}
  union {
    TrainIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrainIndexResponseDefaultTypeInternal _TrainIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR AddFeatureItem_MetaEntry_DoNotUse::AddFeatureItem_MetaEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct AddFeatureItem_MetaEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddFeatureItem_MetaEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddFeatureItem_MetaEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AddFeatureItem_MetaEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddFeatureItem_MetaEntry_DoNotUseDefaultTypeInternal _AddFeatureItem_MetaEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AddFeatureItem::AddFeatureItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.meta_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.feature_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddFeatureItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddFeatureItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddFeatureItemDefaultTypeInternal() {}
  union {
    AddFeatureItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddFeatureItemDefaultTypeInternal _AddFeatureItem_default_instance_;
PROTOBUF_CONSTEXPR BatchAddFeaturesRequest::BatchAddFeaturesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feature_items_)*/{}
  , /*decltype(_impl_.db_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchAddFeaturesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchAddFeaturesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchAddFeaturesRequestDefaultTypeInternal() {}
  union {
    BatchAddFeaturesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchAddFeaturesRequestDefaultTypeInternal _BatchAddFeaturesRequest_default_instance_;
PROTOBUF_CONSTEXPR BatchAddFeaturesResponse::BatchAddFeaturesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feature_ids_)*/{}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchAddFeaturesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchAddFeaturesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchAddFeaturesResponseDefaultTypeInternal() {}
  union {
    BatchAddFeaturesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchAddFeaturesResponseDefaultTypeInternal _BatchAddFeaturesResponse_default_instance_;
PROTOBUF_CONSTEXPR BatchDeleteFeaturesRequest::BatchDeleteFeaturesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feature_ids_)*/{}
  , /*decltype(_impl_.db_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchDeleteFeaturesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchDeleteFeaturesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchDeleteFeaturesRequestDefaultTypeInternal() {}
  union {
    BatchDeleteFeaturesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchDeleteFeaturesRequestDefaultTypeInternal _BatchDeleteFeaturesRequest_default_instance_;
PROTOBUF_CONSTEXPR BatchDeleteFeaturesResponse::BatchDeleteFeaturesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatchDeleteFeaturesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatchDeleteFeaturesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatchDeleteFeaturesResponseDefaultTypeInternal() {}
  union {
    BatchDeleteFeaturesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatchDeleteFeaturesResponseDefaultTypeInternal _BatchDeleteFeaturesResponse_default_instance_;
PROTOBUF_CONSTEXPR SearchFeatureRequest::SearchFeatureRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_ids_)*/{}
  , /*decltype(_impl_.query_)*/nullptr
  , /*decltype(_impl_.topk_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchFeatureRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchFeatureRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchFeatureRequestDefaultTypeInternal() {}
  union {
    SearchFeatureRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchFeatureRequestDefaultTypeInternal _SearchFeatureRequest_default_instance_;
PROTOBUF_CONSTEXPR SearchItemScore::SearchItemScore(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.feature_)*/nullptr
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchItemScoreDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchItemScoreDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchItemScoreDefaultTypeInternal() {}
  union {
    SearchItemScore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchItemScoreDefaultTypeInternal _SearchItemScore_default_instance_;
PROTOBUF_CONSTEXPR SearchFeatureResponse::SearchFeatureResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchFeatureResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchFeatureResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchFeatureResponseDefaultTypeInternal() {}
  union {
    SearchFeatureResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchFeatureResponseDefaultTypeInternal _SearchFeatureResponse_default_instance_;
}  // namespace inner
}  // namespace feature_search
}  // namespace sekirocc
}  // namespace com
static ::_pb::Metadata file_level_metadata_feature_5fsearch_5finner_2eproto[16];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_feature_5fsearch_5finner_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_feature_5fsearch_5finner_2eproto = nullptr;

const uint32_t TableStruct_feature_5fsearch_5finner_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::AssignDBShardsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::AssignDBShardsRequest, _impl_.db_id_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::AssignDBShardsRequest, _impl_.shard_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::AssignDBShardsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::AssignDBShardsResponse, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::GetSystemInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::WorkerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::WorkerInfo, _impl_.capacity_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::WorkerInfo, _impl_.device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::GetSystemInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::GetSystemInfoResponse, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::GetSystemInfoResponse, _impl_.dbs_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::GetSystemInfoResponse, _impl_.worker_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::TrainIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::TrainIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::TrainIndexResponse, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::AddFeatureItem_MetaEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::AddFeatureItem_MetaEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::AddFeatureItem_MetaEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::AddFeatureItem_MetaEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::AddFeatureItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::AddFeatureItem, _impl_.feature_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::AddFeatureItem, _impl_.meta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest, _impl_.db_id_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest, _impl_.feature_items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse, _impl_.feature_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest, _impl_.db_id_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest, _impl_.feature_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::SearchFeatureRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::SearchFeatureRequest, _impl_.db_ids_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::SearchFeatureRequest, _impl_.query_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::SearchFeatureRequest, _impl_.topk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::SearchItemScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::SearchItemScore, _impl_.db_id_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::SearchItemScore, _impl_.feature_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::SearchItemScore, _impl_.score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::SearchFeatureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::SearchFeatureResponse, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_search::inner::SearchFeatureResponse, _impl_.items_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::sekirocc::feature_search::inner::AssignDBShardsRequest)},
  { 8, -1, -1, sizeof(::com::sekirocc::feature_search::inner::AssignDBShardsResponse)},
  { 15, -1, -1, sizeof(::com::sekirocc::feature_search::inner::GetSystemInfoRequest)},
  { 21, -1, -1, sizeof(::com::sekirocc::feature_search::inner::WorkerInfo)},
  { 29, -1, -1, sizeof(::com::sekirocc::feature_search::inner::GetSystemInfoResponse)},
  { 38, -1, -1, sizeof(::com::sekirocc::feature_search::inner::TrainIndexRequest)},
  { 44, -1, -1, sizeof(::com::sekirocc::feature_search::inner::TrainIndexResponse)},
  { 51, 59, -1, sizeof(::com::sekirocc::feature_search::inner::AddFeatureItem_MetaEntry_DoNotUse)},
  { 61, -1, -1, sizeof(::com::sekirocc::feature_search::inner::AddFeatureItem)},
  { 69, -1, -1, sizeof(::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest)},
  { 77, -1, -1, sizeof(::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse)},
  { 85, -1, -1, sizeof(::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest)},
  { 93, -1, -1, sizeof(::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse)},
  { 100, -1, -1, sizeof(::com::sekirocc::feature_search::inner::SearchFeatureRequest)},
  { 109, -1, -1, sizeof(::com::sekirocc::feature_search::inner::SearchItemScore)},
  { 118, -1, -1, sizeof(::com::sekirocc::feature_search::inner::SearchFeatureResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::sekirocc::feature_search::inner::_AssignDBShardsRequest_default_instance_._instance,
  &::com::sekirocc::feature_search::inner::_AssignDBShardsResponse_default_instance_._instance,
  &::com::sekirocc::feature_search::inner::_GetSystemInfoRequest_default_instance_._instance,
  &::com::sekirocc::feature_search::inner::_WorkerInfo_default_instance_._instance,
  &::com::sekirocc::feature_search::inner::_GetSystemInfoResponse_default_instance_._instance,
  &::com::sekirocc::feature_search::inner::_TrainIndexRequest_default_instance_._instance,
  &::com::sekirocc::feature_search::inner::_TrainIndexResponse_default_instance_._instance,
  &::com::sekirocc::feature_search::inner::_AddFeatureItem_MetaEntry_DoNotUse_default_instance_._instance,
  &::com::sekirocc::feature_search::inner::_AddFeatureItem_default_instance_._instance,
  &::com::sekirocc::feature_search::inner::_BatchAddFeaturesRequest_default_instance_._instance,
  &::com::sekirocc::feature_search::inner::_BatchAddFeaturesResponse_default_instance_._instance,
  &::com::sekirocc::feature_search::inner::_BatchDeleteFeaturesRequest_default_instance_._instance,
  &::com::sekirocc::feature_search::inner::_BatchDeleteFeaturesResponse_default_instance_._instance,
  &::com::sekirocc::feature_search::inner::_SearchFeatureRequest_default_instance_._instance,
  &::com::sekirocc::feature_search::inner::_SearchItemScore_default_instance_._instance,
  &::com::sekirocc::feature_search::inner::_SearchFeatureResponse_default_instance_._instance,
};

const char descriptor_table_protodef_feature_5fsearch_5finner_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032feature_search_inner.proto\022!com.sekiro"
  "cc.feature_search.inner\032\034google/api/anno"
  "tations.proto\032\014common.proto\"9\n\025AssignDBS"
  "hardsRequest\022\r\n\005db_id\030\001 \001(\t\022\021\n\tshard_ids"
  "\030\002 \003(\t\"G\n\026AssignDBShardsResponse\022-\n\004code"
  "\030\001 \001(\0162\037.com.sekirocc.common.ResultCode\""
  "\026\n\024GetSystemInfoRequest\".\n\nWorkerInfo\022\020\n"
  "\010capacity\030\001 \001(\003\022\016\n\006device\030\002 \001(\t\"\264\001\n\025GetS"
  "ystemInfoResponse\022-\n\004code\030\001 \001(\0162\037.com.se"
  "kirocc.common.ResultCode\022(\n\003dbs\030\002 \003(\0132\033."
  "com.sekirocc.common.DBItem\022B\n\013worker_inf"
  "o\030\003 \001(\0132-.com.sekirocc.feature_search.in"
  "ner.WorkerInfo\"\023\n\021TrainIndexRequest\"C\n\022T"
  "rainIndexResponse\022-\n\004code\030\001 \001(\0162\037.com.se"
  "kirocc.common.ResultCode\"\273\001\n\016AddFeatureI"
  "tem\0221\n\007feature\030\001 \001(\0132 .com.sekirocc.comm"
  "on.FaceFeature\022I\n\004meta\030\002 \003(\0132;.com.sekir"
  "occ.feature_search.inner.AddFeatureItem."
  "MetaEntry\032+\n\tMetaEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\t:\0028\001\"r\n\027BatchAddFeaturesReques"
  "t\022\r\n\005db_id\030\001 \001(\t\022H\n\rfeature_items\030\002 \003(\0132"
  "1.com.sekirocc.feature_search.inner.AddF"
  "eatureItem\"^\n\030BatchAddFeaturesResponse\022-"
  "\n\004code\030\001 \001(\0162\037.com.sekirocc.common.Resul"
  "tCode\022\023\n\013feature_ids\030\002 \003(\t\"@\n\032BatchDelet"
  "eFeaturesRequest\022\r\n\005db_id\030\001 \001(\t\022\023\n\013featu"
  "re_ids\030\002 \003(\t\"L\n\033BatchDeleteFeaturesRespo"
  "nse\022-\n\004code\030\001 \001(\0162\037.com.sekirocc.common."
  "ResultCode\"e\n\024SearchFeatureRequest\022\016\n\006db"
  "_ids\030\001 \003(\t\022/\n\005query\030\002 \001(\0132 .com.sekirocc"
  ".common.FaceFeature\022\014\n\004topk\030\003 \001(\005\"b\n\017Sea"
  "rchItemScore\022\r\n\005db_id\030\001 \001(\t\0221\n\007feature\030\002"
  " \001(\0132 .com.sekirocc.common.FaceFeature\022\r"
  "\n\005score\030\003 \001(\002\"\211\001\n\025SearchFeatureResponse\022"
  "-\n\004code\030\001 \001(\0162\037.com.sekirocc.common.Resu"
  "ltCode\022A\n\005items\030\002 \003(\01322.com.sekirocc.fea"
  "ture_search.inner.SearchItemScore2\373\007\n\023Fe"
  "atureSearchWorker\022\237\001\n\rGetSystemInfo\0227.co"
  "m.sekirocc.feature_search.inner.GetSyste"
  "mInfoRequest\0328.com.sekirocc.feature_sear"
  "ch.inner.GetSystemInfoResponse\"\033\202\323\344\223\002\025\"\020"
  "/get_system_info:\001*\022\243\001\n\016AssignDBShards\0228"
  ".com.sekirocc.feature_search.inner.Assig"
  "nDBShardsRequest\0329.com.sekirocc.feature_"
  "search.inner.AssignDBShardsResponse\"\034\202\323\344"
  "\223\002\026\"\021/assign_db_shards:\001*\022\222\001\n\nTrainIndex"
  "\0224.com.sekirocc.feature_search.inner.Tra"
  "inIndexRequest\0325.com.sekirocc.feature_se"
  "arch.inner.TrainIndexResponse\"\027\202\323\344\223\002\021\"\014/"
  "train_index:\001*\022\253\001\n\020BatchAddFeatures\022:.co"
  "m.sekirocc.feature_search.inner.BatchAdd"
  "FeaturesRequest\032;.com.sekirocc.feature_s"
  "earch.inner.BatchAddFeaturesResponse\"\036\202\323"
  "\344\223\002\030\"\023/batch_add_features:\001*\022\267\001\n\023BatchDe"
  "leteFeatures\022=.com.sekirocc.feature_sear"
  "ch.inner.BatchDeleteFeaturesRequest\032>.co"
  "m.sekirocc.feature_search.inner.BatchDel"
  "eteFeaturesResponse\"!\202\323\344\223\002\033\"\026/batch_dele"
  "te_features:\001*\022\236\001\n\rSearchFeature\0227.com.s"
  "ekirocc.feature_search.inner.SearchFeatu"
  "reRequest\0328.com.sekirocc.feature_search."
  "inner.SearchFeatureResponse\"\032\202\323\344\223\002\024\"\017/se"
  "arch_feature:\001*BCZAgithub.com/sekirocc/f"
  "ace-recognition-service/feature_search/i"
  "nnerb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_feature_5fsearch_5finner_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::_pbi::once_flag descriptor_table_feature_5fsearch_5finner_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_feature_5fsearch_5finner_2eproto = {
    false, false, 2572, descriptor_table_protodef_feature_5fsearch_5finner_2eproto,
    "feature_search_inner.proto",
    &descriptor_table_feature_5fsearch_5finner_2eproto_once, descriptor_table_feature_5fsearch_5finner_2eproto_deps, 2, 16,
    schemas, file_default_instances, TableStruct_feature_5fsearch_5finner_2eproto::offsets,
    file_level_metadata_feature_5fsearch_5finner_2eproto, file_level_enum_descriptors_feature_5fsearch_5finner_2eproto,
    file_level_service_descriptors_feature_5fsearch_5finner_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_feature_5fsearch_5finner_2eproto_getter() {
  return &descriptor_table_feature_5fsearch_5finner_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_feature_5fsearch_5finner_2eproto(&descriptor_table_feature_5fsearch_5finner_2eproto);
namespace com {
namespace sekirocc {
namespace feature_search {
namespace inner {

// ===================================================================

class AssignDBShardsRequest::_Internal {
 public:
};

AssignDBShardsRequest::AssignDBShardsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_search.inner.AssignDBShardsRequest)
}
AssignDBShardsRequest::AssignDBShardsRequest(const AssignDBShardsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssignDBShardsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_ids_){from._impl_.shard_ids_}
    , decltype(_impl_.db_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_id().empty()) {
    _this->_impl_.db_id_.Set(from._internal_db_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_search.inner.AssignDBShardsRequest)
}

inline void AssignDBShardsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shard_ids_){arena}
    , decltype(_impl_.db_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AssignDBShardsRequest::~AssignDBShardsRequest() {
  // @@protoc_insertion_point(destructor:com.sekirocc.feature_search.inner.AssignDBShardsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssignDBShardsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shard_ids_.~RepeatedPtrField();
  _impl_.db_id_.Destroy();
}

void AssignDBShardsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssignDBShardsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.feature_search.inner.AssignDBShardsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shard_ids_.Clear();
  _impl_.db_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssignDBShardsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.sekirocc.feature_search.inner.AssignDBShardsRequest.db_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string shard_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_shard_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "com.sekirocc.feature_search.inner.AssignDBShardsRequest.shard_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssignDBShardsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.feature_search.inner.AssignDBShardsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_id = 1;
  if (!this->_internal_db_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_id().data(), static_cast<int>(this->_internal_db_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.sekirocc.feature_search.inner.AssignDBShardsRequest.db_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_id(), target);
  }

  // repeated string shard_ids = 2;
  for (int i = 0, n = this->_internal_shard_ids_size(); i < n; i++) {
    const auto& s = this->_internal_shard_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.sekirocc.feature_search.inner.AssignDBShardsRequest.shard_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.feature_search.inner.AssignDBShardsRequest)
  return target;
}

size_t AssignDBShardsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.feature_search.inner.AssignDBShardsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string shard_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.shard_ids_.size());
  for (int i = 0, n = _impl_.shard_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.shard_ids_.Get(i));
  }

  // string db_id = 1;
  if (!this->_internal_db_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssignDBShardsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssignDBShardsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssignDBShardsRequest::GetClassData() const { return &_class_data_; }


void AssignDBShardsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssignDBShardsRequest*>(&to_msg);
  auto& from = static_cast<const AssignDBShardsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.feature_search.inner.AssignDBShardsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shard_ids_.MergeFrom(from._impl_.shard_ids_);
  if (!from._internal_db_id().empty()) {
    _this->_internal_set_db_id(from._internal_db_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssignDBShardsRequest::CopyFrom(const AssignDBShardsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.feature_search.inner.AssignDBShardsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignDBShardsRequest::IsInitialized() const {
  return true;
}

void AssignDBShardsRequest::InternalSwap(AssignDBShardsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shard_ids_.InternalSwap(&other->_impl_.shard_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_id_, lhs_arena,
      &other->_impl_.db_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AssignDBShardsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fsearch_5finner_2eproto_getter, &descriptor_table_feature_5fsearch_5finner_2eproto_once,
      file_level_metadata_feature_5fsearch_5finner_2eproto[0]);
}

// ===================================================================

class AssignDBShardsResponse::_Internal {
 public:
};

AssignDBShardsResponse::AssignDBShardsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_search.inner.AssignDBShardsResponse)
}
AssignDBShardsResponse::AssignDBShardsResponse(const AssignDBShardsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AssignDBShardsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_search.inner.AssignDBShardsResponse)
}

inline void AssignDBShardsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AssignDBShardsResponse::~AssignDBShardsResponse() {
  // @@protoc_insertion_point(destructor:com.sekirocc.feature_search.inner.AssignDBShardsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AssignDBShardsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AssignDBShardsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AssignDBShardsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.feature_search.inner.AssignDBShardsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AssignDBShardsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.common.ResultCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::com::sekirocc::common::ResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AssignDBShardsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.feature_search.inner.AssignDBShardsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.common.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.feature_search.inner.AssignDBShardsResponse)
  return target;
}

size_t AssignDBShardsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.feature_search.inner.AssignDBShardsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.sekirocc.common.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AssignDBShardsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AssignDBShardsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AssignDBShardsResponse::GetClassData() const { return &_class_data_; }


void AssignDBShardsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AssignDBShardsResponse*>(&to_msg);
  auto& from = static_cast<const AssignDBShardsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.feature_search.inner.AssignDBShardsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AssignDBShardsResponse::CopyFrom(const AssignDBShardsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.feature_search.inner.AssignDBShardsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignDBShardsResponse::IsInitialized() const {
  return true;
}

void AssignDBShardsResponse::InternalSwap(AssignDBShardsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssignDBShardsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fsearch_5finner_2eproto_getter, &descriptor_table_feature_5fsearch_5finner_2eproto_once,
      file_level_metadata_feature_5fsearch_5finner_2eproto[1]);
}

// ===================================================================

class GetSystemInfoRequest::_Internal {
 public:
};

GetSystemInfoRequest::GetSystemInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_search.inner.GetSystemInfoRequest)
}
GetSystemInfoRequest::GetSystemInfoRequest(const GetSystemInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetSystemInfoRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_search.inner.GetSystemInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSystemInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSystemInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetSystemInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fsearch_5finner_2eproto_getter, &descriptor_table_feature_5fsearch_5finner_2eproto_once,
      file_level_metadata_feature_5fsearch_5finner_2eproto[2]);
}

// ===================================================================

class WorkerInfo::_Internal {
 public:
};

WorkerInfo::WorkerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_search.inner.WorkerInfo)
}
WorkerInfo::WorkerInfo(const WorkerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){}
    , decltype(_impl_.capacity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device().empty()) {
    _this->_impl_.device_.Set(from._internal_device(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.capacity_ = from._impl_.capacity_;
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_search.inner.WorkerInfo)
}

inline void WorkerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){}
    , decltype(_impl_.capacity_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkerInfo::~WorkerInfo() {
  // @@protoc_insertion_point(destructor:com.sekirocc.feature_search.inner.WorkerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_.Destroy();
}

void WorkerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.feature_search.inner.WorkerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_.ClearToEmpty();
  _impl_.capacity_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 capacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_device();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.sekirocc.feature_search.inner.WorkerInfo.device"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.feature_search.inner.WorkerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 capacity = 1;
  if (this->_internal_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_capacity(), target);
  }

  // string device = 2;
  if (!this->_internal_device().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.sekirocc.feature_search.inner.WorkerInfo.device");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.feature_search.inner.WorkerInfo)
  return target;
}

size_t WorkerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.feature_search.inner.WorkerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device = 2;
  if (!this->_internal_device().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device());
  }

  // int64 capacity = 1;
  if (this->_internal_capacity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_capacity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkerInfo::GetClassData() const { return &_class_data_; }


void WorkerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkerInfo*>(&to_msg);
  auto& from = static_cast<const WorkerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.feature_search.inner.WorkerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device().empty()) {
    _this->_internal_set_device(from._internal_device());
  }
  if (from._internal_capacity() != 0) {
    _this->_internal_set_capacity(from._internal_capacity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkerInfo::CopyFrom(const WorkerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.feature_search.inner.WorkerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerInfo::IsInitialized() const {
  return true;
}

void WorkerInfo::InternalSwap(WorkerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_, lhs_arena,
      &other->_impl_.device_, rhs_arena
  );
  swap(_impl_.capacity_, other->_impl_.capacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fsearch_5finner_2eproto_getter, &descriptor_table_feature_5fsearch_5finner_2eproto_once,
      file_level_metadata_feature_5fsearch_5finner_2eproto[3]);
}

// ===================================================================

class GetSystemInfoResponse::_Internal {
 public:
  static const ::com::sekirocc::feature_search::inner::WorkerInfo& worker_info(const GetSystemInfoResponse* msg);
};

const ::com::sekirocc::feature_search::inner::WorkerInfo&
GetSystemInfoResponse::_Internal::worker_info(const GetSystemInfoResponse* msg) {
  return *msg->_impl_.worker_info_;
}
void GetSystemInfoResponse::clear_dbs() {
  _impl_.dbs_.Clear();
}
GetSystemInfoResponse::GetSystemInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_search.inner.GetSystemInfoResponse)
}
GetSystemInfoResponse::GetSystemInfoResponse(const GetSystemInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSystemInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dbs_){from._impl_.dbs_}
    , decltype(_impl_.worker_info_){nullptr}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_worker_info()) {
    _this->_impl_.worker_info_ = new ::com::sekirocc::feature_search::inner::WorkerInfo(*from._impl_.worker_info_);
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_search.inner.GetSystemInfoResponse)
}

inline void GetSystemInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dbs_){arena}
    , decltype(_impl_.worker_info_){nullptr}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSystemInfoResponse::~GetSystemInfoResponse() {
  // @@protoc_insertion_point(destructor:com.sekirocc.feature_search.inner.GetSystemInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSystemInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dbs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.worker_info_;
}

void GetSystemInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSystemInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.feature_search.inner.GetSystemInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dbs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.worker_info_ != nullptr) {
    delete _impl_.worker_info_;
  }
  _impl_.worker_info_ = nullptr;
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSystemInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.common.ResultCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::com::sekirocc::common::ResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.sekirocc.common.DBItem dbs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dbs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .com.sekirocc.feature_search.inner.WorkerInfo worker_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_worker_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSystemInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.feature_search.inner.GetSystemInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.common.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // repeated .com.sekirocc.common.DBItem dbs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dbs_size()); i < n; i++) {
    const auto& repfield = this->_internal_dbs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .com.sekirocc.feature_search.inner.WorkerInfo worker_info = 3;
  if (this->_internal_has_worker_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::worker_info(this),
        _Internal::worker_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.feature_search.inner.GetSystemInfoResponse)
  return target;
}

size_t GetSystemInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.feature_search.inner.GetSystemInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.sekirocc.common.DBItem dbs = 2;
  total_size += 1UL * this->_internal_dbs_size();
  for (const auto& msg : this->_impl_.dbs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .com.sekirocc.feature_search.inner.WorkerInfo worker_info = 3;
  if (this->_internal_has_worker_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.worker_info_);
  }

  // .com.sekirocc.common.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSystemInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSystemInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSystemInfoResponse::GetClassData() const { return &_class_data_; }


void GetSystemInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSystemInfoResponse*>(&to_msg);
  auto& from = static_cast<const GetSystemInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.feature_search.inner.GetSystemInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dbs_.MergeFrom(from._impl_.dbs_);
  if (from._internal_has_worker_info()) {
    _this->_internal_mutable_worker_info()->::com::sekirocc::feature_search::inner::WorkerInfo::MergeFrom(
        from._internal_worker_info());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSystemInfoResponse::CopyFrom(const GetSystemInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.feature_search.inner.GetSystemInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemInfoResponse::IsInitialized() const {
  return true;
}

void GetSystemInfoResponse::InternalSwap(GetSystemInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dbs_.InternalSwap(&other->_impl_.dbs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSystemInfoResponse, _impl_.code_)
      + sizeof(GetSystemInfoResponse::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(GetSystemInfoResponse, _impl_.worker_info_)>(
          reinterpret_cast<char*>(&_impl_.worker_info_),
          reinterpret_cast<char*>(&other->_impl_.worker_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSystemInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fsearch_5finner_2eproto_getter, &descriptor_table_feature_5fsearch_5finner_2eproto_once,
      file_level_metadata_feature_5fsearch_5finner_2eproto[4]);
}

// ===================================================================

class TrainIndexRequest::_Internal {
 public:
};

TrainIndexRequest::TrainIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_search.inner.TrainIndexRequest)
}
TrainIndexRequest::TrainIndexRequest(const TrainIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  TrainIndexRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_search.inner.TrainIndexRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrainIndexRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrainIndexRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TrainIndexRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fsearch_5finner_2eproto_getter, &descriptor_table_feature_5fsearch_5finner_2eproto_once,
      file_level_metadata_feature_5fsearch_5finner_2eproto[5]);
}

// ===================================================================

class TrainIndexResponse::_Internal {
 public:
};

TrainIndexResponse::TrainIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_search.inner.TrainIndexResponse)
}
TrainIndexResponse::TrainIndexResponse(const TrainIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrainIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_search.inner.TrainIndexResponse)
}

inline void TrainIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TrainIndexResponse::~TrainIndexResponse() {
  // @@protoc_insertion_point(destructor:com.sekirocc.feature_search.inner.TrainIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrainIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrainIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrainIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.feature_search.inner.TrainIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.common.ResultCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::com::sekirocc::common::ResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrainIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.feature_search.inner.TrainIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.common.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.feature_search.inner.TrainIndexResponse)
  return target;
}

size_t TrainIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.feature_search.inner.TrainIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.sekirocc.common.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrainIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrainIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrainIndexResponse::GetClassData() const { return &_class_data_; }


void TrainIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrainIndexResponse*>(&to_msg);
  auto& from = static_cast<const TrainIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.feature_search.inner.TrainIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrainIndexResponse::CopyFrom(const TrainIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.feature_search.inner.TrainIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainIndexResponse::IsInitialized() const {
  return true;
}

void TrainIndexResponse::InternalSwap(TrainIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fsearch_5finner_2eproto_getter, &descriptor_table_feature_5fsearch_5finner_2eproto_once,
      file_level_metadata_feature_5fsearch_5finner_2eproto[6]);
}

// ===================================================================

AddFeatureItem_MetaEntry_DoNotUse::AddFeatureItem_MetaEntry_DoNotUse() {}
AddFeatureItem_MetaEntry_DoNotUse::AddFeatureItem_MetaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AddFeatureItem_MetaEntry_DoNotUse::MergeFrom(const AddFeatureItem_MetaEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AddFeatureItem_MetaEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fsearch_5finner_2eproto_getter, &descriptor_table_feature_5fsearch_5finner_2eproto_once,
      file_level_metadata_feature_5fsearch_5finner_2eproto[7]);
}

// ===================================================================

class AddFeatureItem::_Internal {
 public:
  static const ::com::sekirocc::common::FaceFeature& feature(const AddFeatureItem* msg);
};

const ::com::sekirocc::common::FaceFeature&
AddFeatureItem::_Internal::feature(const AddFeatureItem* msg) {
  return *msg->_impl_.feature_;
}
void AddFeatureItem::clear_feature() {
  if (GetArenaForAllocation() == nullptr && _impl_.feature_ != nullptr) {
    delete _impl_.feature_;
  }
  _impl_.feature_ = nullptr;
}
AddFeatureItem::AddFeatureItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AddFeatureItem::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_search.inner.AddFeatureItem)
}
AddFeatureItem::AddFeatureItem(const AddFeatureItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddFeatureItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.meta_)*/{}
    , decltype(_impl_.feature_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.meta_.MergeFrom(from._impl_.meta_);
  if (from._internal_has_feature()) {
    _this->_impl_.feature_ = new ::com::sekirocc::common::FaceFeature(*from._impl_.feature_);
  }
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_search.inner.AddFeatureItem)
}

inline void AddFeatureItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.meta_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.feature_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddFeatureItem::~AddFeatureItem() {
  // @@protoc_insertion_point(destructor:com.sekirocc.feature_search.inner.AddFeatureItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AddFeatureItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.meta_.Destruct();
  _impl_.meta_.~MapField();
  if (this != internal_default_instance()) delete _impl_.feature_;
}

void AddFeatureItem::ArenaDtor(void* object) {
  AddFeatureItem* _this = reinterpret_cast< AddFeatureItem* >(object);
  _this->_impl_.meta_.Destruct();
}
void AddFeatureItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddFeatureItem::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.feature_search.inner.AddFeatureItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.meta_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.feature_ != nullptr) {
    delete _impl_.feature_;
  }
  _impl_.feature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddFeatureItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.common.FaceFeature feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> meta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.meta_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddFeatureItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.feature_search.inner.AddFeatureItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.common.FaceFeature feature = 1;
  if (this->_internal_has_feature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::feature(this),
        _Internal::feature(this).GetCachedSize(), target, stream);
  }

  // map<string, string> meta = 2;
  if (!this->_internal_meta().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AddFeatureItem_MetaEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_meta();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "com.sekirocc.feature_search.inner.AddFeatureItem.MetaEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "com.sekirocc.feature_search.inner.AddFeatureItem.MetaEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.feature_search.inner.AddFeatureItem)
  return target;
}

size_t AddFeatureItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.feature_search.inner.AddFeatureItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> meta = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_meta_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_meta().begin();
      it != this->_internal_meta().end(); ++it) {
    total_size += AddFeatureItem_MetaEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .com.sekirocc.common.FaceFeature feature = 1;
  if (this->_internal_has_feature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.feature_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddFeatureItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddFeatureItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddFeatureItem::GetClassData() const { return &_class_data_; }


void AddFeatureItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddFeatureItem*>(&to_msg);
  auto& from = static_cast<const AddFeatureItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.feature_search.inner.AddFeatureItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.meta_.MergeFrom(from._impl_.meta_);
  if (from._internal_has_feature()) {
    _this->_internal_mutable_feature()->::com::sekirocc::common::FaceFeature::MergeFrom(
        from._internal_feature());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddFeatureItem::CopyFrom(const AddFeatureItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.feature_search.inner.AddFeatureItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFeatureItem::IsInitialized() const {
  return true;
}

void AddFeatureItem::InternalSwap(AddFeatureItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.meta_.InternalSwap(&other->_impl_.meta_);
  swap(_impl_.feature_, other->_impl_.feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddFeatureItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fsearch_5finner_2eproto_getter, &descriptor_table_feature_5fsearch_5finner_2eproto_once,
      file_level_metadata_feature_5fsearch_5finner_2eproto[8]);
}

// ===================================================================

class BatchAddFeaturesRequest::_Internal {
 public:
};

BatchAddFeaturesRequest::BatchAddFeaturesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_search.inner.BatchAddFeaturesRequest)
}
BatchAddFeaturesRequest::BatchAddFeaturesRequest(const BatchAddFeaturesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchAddFeaturesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_items_){from._impl_.feature_items_}
    , decltype(_impl_.db_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_id().empty()) {
    _this->_impl_.db_id_.Set(from._internal_db_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_search.inner.BatchAddFeaturesRequest)
}

inline void BatchAddFeaturesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_items_){arena}
    , decltype(_impl_.db_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BatchAddFeaturesRequest::~BatchAddFeaturesRequest() {
  // @@protoc_insertion_point(destructor:com.sekirocc.feature_search.inner.BatchAddFeaturesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchAddFeaturesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feature_items_.~RepeatedPtrField();
  _impl_.db_id_.Destroy();
}

void BatchAddFeaturesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchAddFeaturesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.feature_search.inner.BatchAddFeaturesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feature_items_.Clear();
  _impl_.db_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchAddFeaturesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.sekirocc.feature_search.inner.BatchAddFeaturesRequest.db_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.sekirocc.feature_search.inner.AddFeatureItem feature_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchAddFeaturesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.feature_search.inner.BatchAddFeaturesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_id = 1;
  if (!this->_internal_db_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_id().data(), static_cast<int>(this->_internal_db_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.sekirocc.feature_search.inner.BatchAddFeaturesRequest.db_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_id(), target);
  }

  // repeated .com.sekirocc.feature_search.inner.AddFeatureItem feature_items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feature_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_feature_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.feature_search.inner.BatchAddFeaturesRequest)
  return target;
}

size_t BatchAddFeaturesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.feature_search.inner.BatchAddFeaturesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.sekirocc.feature_search.inner.AddFeatureItem feature_items = 2;
  total_size += 1UL * this->_internal_feature_items_size();
  for (const auto& msg : this->_impl_.feature_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string db_id = 1;
  if (!this->_internal_db_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchAddFeaturesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchAddFeaturesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchAddFeaturesRequest::GetClassData() const { return &_class_data_; }


void BatchAddFeaturesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchAddFeaturesRequest*>(&to_msg);
  auto& from = static_cast<const BatchAddFeaturesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.feature_search.inner.BatchAddFeaturesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.feature_items_.MergeFrom(from._impl_.feature_items_);
  if (!from._internal_db_id().empty()) {
    _this->_internal_set_db_id(from._internal_db_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchAddFeaturesRequest::CopyFrom(const BatchAddFeaturesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.feature_search.inner.BatchAddFeaturesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchAddFeaturesRequest::IsInitialized() const {
  return true;
}

void BatchAddFeaturesRequest::InternalSwap(BatchAddFeaturesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.feature_items_.InternalSwap(&other->_impl_.feature_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_id_, lhs_arena,
      &other->_impl_.db_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchAddFeaturesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fsearch_5finner_2eproto_getter, &descriptor_table_feature_5fsearch_5finner_2eproto_once,
      file_level_metadata_feature_5fsearch_5finner_2eproto[9]);
}

// ===================================================================

class BatchAddFeaturesResponse::_Internal {
 public:
};

BatchAddFeaturesResponse::BatchAddFeaturesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_search.inner.BatchAddFeaturesResponse)
}
BatchAddFeaturesResponse::BatchAddFeaturesResponse(const BatchAddFeaturesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchAddFeaturesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_ids_){from._impl_.feature_ids_}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_search.inner.BatchAddFeaturesResponse)
}

inline void BatchAddFeaturesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_ids_){arena}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BatchAddFeaturesResponse::~BatchAddFeaturesResponse() {
  // @@protoc_insertion_point(destructor:com.sekirocc.feature_search.inner.BatchAddFeaturesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchAddFeaturesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feature_ids_.~RepeatedPtrField();
}

void BatchAddFeaturesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchAddFeaturesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.feature_search.inner.BatchAddFeaturesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feature_ids_.Clear();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchAddFeaturesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.common.ResultCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::com::sekirocc::common::ResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string feature_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_feature_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "com.sekirocc.feature_search.inner.BatchAddFeaturesResponse.feature_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchAddFeaturesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.feature_search.inner.BatchAddFeaturesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.common.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // repeated string feature_ids = 2;
  for (int i = 0, n = this->_internal_feature_ids_size(); i < n; i++) {
    const auto& s = this->_internal_feature_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.sekirocc.feature_search.inner.BatchAddFeaturesResponse.feature_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.feature_search.inner.BatchAddFeaturesResponse)
  return target;
}

size_t BatchAddFeaturesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.feature_search.inner.BatchAddFeaturesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string feature_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.feature_ids_.size());
  for (int i = 0, n = _impl_.feature_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.feature_ids_.Get(i));
  }

  // .com.sekirocc.common.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchAddFeaturesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchAddFeaturesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchAddFeaturesResponse::GetClassData() const { return &_class_data_; }


void BatchAddFeaturesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchAddFeaturesResponse*>(&to_msg);
  auto& from = static_cast<const BatchAddFeaturesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.feature_search.inner.BatchAddFeaturesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.feature_ids_.MergeFrom(from._impl_.feature_ids_);
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchAddFeaturesResponse::CopyFrom(const BatchAddFeaturesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.feature_search.inner.BatchAddFeaturesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchAddFeaturesResponse::IsInitialized() const {
  return true;
}

void BatchAddFeaturesResponse::InternalSwap(BatchAddFeaturesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.feature_ids_.InternalSwap(&other->_impl_.feature_ids_);
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchAddFeaturesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fsearch_5finner_2eproto_getter, &descriptor_table_feature_5fsearch_5finner_2eproto_once,
      file_level_metadata_feature_5fsearch_5finner_2eproto[10]);
}

// ===================================================================

class BatchDeleteFeaturesRequest::_Internal {
 public:
};

BatchDeleteFeaturesRequest::BatchDeleteFeaturesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_search.inner.BatchDeleteFeaturesRequest)
}
BatchDeleteFeaturesRequest::BatchDeleteFeaturesRequest(const BatchDeleteFeaturesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchDeleteFeaturesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_ids_){from._impl_.feature_ids_}
    , decltype(_impl_.db_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_id().empty()) {
    _this->_impl_.db_id_.Set(from._internal_db_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_search.inner.BatchDeleteFeaturesRequest)
}

inline void BatchDeleteFeaturesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_ids_){arena}
    , decltype(_impl_.db_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BatchDeleteFeaturesRequest::~BatchDeleteFeaturesRequest() {
  // @@protoc_insertion_point(destructor:com.sekirocc.feature_search.inner.BatchDeleteFeaturesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchDeleteFeaturesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feature_ids_.~RepeatedPtrField();
  _impl_.db_id_.Destroy();
}

void BatchDeleteFeaturesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchDeleteFeaturesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.feature_search.inner.BatchDeleteFeaturesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feature_ids_.Clear();
  _impl_.db_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchDeleteFeaturesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.sekirocc.feature_search.inner.BatchDeleteFeaturesRequest.db_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string feature_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_feature_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "com.sekirocc.feature_search.inner.BatchDeleteFeaturesRequest.feature_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchDeleteFeaturesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.feature_search.inner.BatchDeleteFeaturesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_id = 1;
  if (!this->_internal_db_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_id().data(), static_cast<int>(this->_internal_db_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.sekirocc.feature_search.inner.BatchDeleteFeaturesRequest.db_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_id(), target);
  }

  // repeated string feature_ids = 2;
  for (int i = 0, n = this->_internal_feature_ids_size(); i < n; i++) {
    const auto& s = this->_internal_feature_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.sekirocc.feature_search.inner.BatchDeleteFeaturesRequest.feature_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.feature_search.inner.BatchDeleteFeaturesRequest)
  return target;
}

size_t BatchDeleteFeaturesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.feature_search.inner.BatchDeleteFeaturesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string feature_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.feature_ids_.size());
  for (int i = 0, n = _impl_.feature_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.feature_ids_.Get(i));
  }

  // string db_id = 1;
  if (!this->_internal_db_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchDeleteFeaturesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchDeleteFeaturesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchDeleteFeaturesRequest::GetClassData() const { return &_class_data_; }


void BatchDeleteFeaturesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchDeleteFeaturesRequest*>(&to_msg);
  auto& from = static_cast<const BatchDeleteFeaturesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.feature_search.inner.BatchDeleteFeaturesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.feature_ids_.MergeFrom(from._impl_.feature_ids_);
  if (!from._internal_db_id().empty()) {
    _this->_internal_set_db_id(from._internal_db_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchDeleteFeaturesRequest::CopyFrom(const BatchDeleteFeaturesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.feature_search.inner.BatchDeleteFeaturesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchDeleteFeaturesRequest::IsInitialized() const {
  return true;
}

void BatchDeleteFeaturesRequest::InternalSwap(BatchDeleteFeaturesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.feature_ids_.InternalSwap(&other->_impl_.feature_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_id_, lhs_arena,
      &other->_impl_.db_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchDeleteFeaturesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fsearch_5finner_2eproto_getter, &descriptor_table_feature_5fsearch_5finner_2eproto_once,
      file_level_metadata_feature_5fsearch_5finner_2eproto[11]);
}

// ===================================================================

class BatchDeleteFeaturesResponse::_Internal {
 public:
};

BatchDeleteFeaturesResponse::BatchDeleteFeaturesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_search.inner.BatchDeleteFeaturesResponse)
}
BatchDeleteFeaturesResponse::BatchDeleteFeaturesResponse(const BatchDeleteFeaturesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatchDeleteFeaturesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_search.inner.BatchDeleteFeaturesResponse)
}

inline void BatchDeleteFeaturesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BatchDeleteFeaturesResponse::~BatchDeleteFeaturesResponse() {
  // @@protoc_insertion_point(destructor:com.sekirocc.feature_search.inner.BatchDeleteFeaturesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatchDeleteFeaturesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatchDeleteFeaturesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatchDeleteFeaturesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.feature_search.inner.BatchDeleteFeaturesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchDeleteFeaturesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.common.ResultCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::com::sekirocc::common::ResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchDeleteFeaturesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.feature_search.inner.BatchDeleteFeaturesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.common.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.feature_search.inner.BatchDeleteFeaturesResponse)
  return target;
}

size_t BatchDeleteFeaturesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.feature_search.inner.BatchDeleteFeaturesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.sekirocc.common.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchDeleteFeaturesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatchDeleteFeaturesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchDeleteFeaturesResponse::GetClassData() const { return &_class_data_; }


void BatchDeleteFeaturesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatchDeleteFeaturesResponse*>(&to_msg);
  auto& from = static_cast<const BatchDeleteFeaturesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.feature_search.inner.BatchDeleteFeaturesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchDeleteFeaturesResponse::CopyFrom(const BatchDeleteFeaturesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.feature_search.inner.BatchDeleteFeaturesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchDeleteFeaturesResponse::IsInitialized() const {
  return true;
}

void BatchDeleteFeaturesResponse::InternalSwap(BatchDeleteFeaturesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchDeleteFeaturesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fsearch_5finner_2eproto_getter, &descriptor_table_feature_5fsearch_5finner_2eproto_once,
      file_level_metadata_feature_5fsearch_5finner_2eproto[12]);
}

// ===================================================================

class SearchFeatureRequest::_Internal {
 public:
  static const ::com::sekirocc::common::FaceFeature& query(const SearchFeatureRequest* msg);
};

const ::com::sekirocc::common::FaceFeature&
SearchFeatureRequest::_Internal::query(const SearchFeatureRequest* msg) {
  return *msg->_impl_.query_;
}
void SearchFeatureRequest::clear_query() {
  if (GetArenaForAllocation() == nullptr && _impl_.query_ != nullptr) {
    delete _impl_.query_;
  }
  _impl_.query_ = nullptr;
}
SearchFeatureRequest::SearchFeatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_search.inner.SearchFeatureRequest)
}
SearchFeatureRequest::SearchFeatureRequest(const SearchFeatureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchFeatureRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_ids_){from._impl_.db_ids_}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.topk_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_query()) {
    _this->_impl_.query_ = new ::com::sekirocc::common::FaceFeature(*from._impl_.query_);
  }
  _this->_impl_.topk_ = from._impl_.topk_;
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_search.inner.SearchFeatureRequest)
}

inline void SearchFeatureRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_ids_){arena}
    , decltype(_impl_.query_){nullptr}
    , decltype(_impl_.topk_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchFeatureRequest::~SearchFeatureRequest() {
  // @@protoc_insertion_point(destructor:com.sekirocc.feature_search.inner.SearchFeatureRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchFeatureRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.query_;
}

void SearchFeatureRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchFeatureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.feature_search.inner.SearchFeatureRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.query_ != nullptr) {
    delete _impl_.query_;
  }
  _impl_.query_ = nullptr;
  _impl_.topk_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchFeatureRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string db_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_db_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "com.sekirocc.feature_search.inner.SearchFeatureRequest.db_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .com.sekirocc.common.FaceFeature query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 topk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.topk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchFeatureRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.feature_search.inner.SearchFeatureRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string db_ids = 1;
  for (int i = 0, n = this->_internal_db_ids_size(); i < n; i++) {
    const auto& s = this->_internal_db_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.sekirocc.feature_search.inner.SearchFeatureRequest.db_ids");
    target = stream->WriteString(1, s, target);
  }

  // .com.sekirocc.common.FaceFeature query = 2;
  if (this->_internal_has_query()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::query(this),
        _Internal::query(this).GetCachedSize(), target, stream);
  }

  // int32 topk = 3;
  if (this->_internal_topk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_topk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.feature_search.inner.SearchFeatureRequest)
  return target;
}

size_t SearchFeatureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.feature_search.inner.SearchFeatureRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string db_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.db_ids_.size());
  for (int i = 0, n = _impl_.db_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.db_ids_.Get(i));
  }

  // .com.sekirocc.common.FaceFeature query = 2;
  if (this->_internal_has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.query_);
  }

  // int32 topk = 3;
  if (this->_internal_topk() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_topk());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchFeatureRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchFeatureRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchFeatureRequest::GetClassData() const { return &_class_data_; }


void SearchFeatureRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchFeatureRequest*>(&to_msg);
  auto& from = static_cast<const SearchFeatureRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.feature_search.inner.SearchFeatureRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.db_ids_.MergeFrom(from._impl_.db_ids_);
  if (from._internal_has_query()) {
    _this->_internal_mutable_query()->::com::sekirocc::common::FaceFeature::MergeFrom(
        from._internal_query());
  }
  if (from._internal_topk() != 0) {
    _this->_internal_set_topk(from._internal_topk());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchFeatureRequest::CopyFrom(const SearchFeatureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.feature_search.inner.SearchFeatureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchFeatureRequest::IsInitialized() const {
  return true;
}

void SearchFeatureRequest::InternalSwap(SearchFeatureRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.db_ids_.InternalSwap(&other->_impl_.db_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchFeatureRequest, _impl_.topk_)
      + sizeof(SearchFeatureRequest::_impl_.topk_)
      - PROTOBUF_FIELD_OFFSET(SearchFeatureRequest, _impl_.query_)>(
          reinterpret_cast<char*>(&_impl_.query_),
          reinterpret_cast<char*>(&other->_impl_.query_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchFeatureRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fsearch_5finner_2eproto_getter, &descriptor_table_feature_5fsearch_5finner_2eproto_once,
      file_level_metadata_feature_5fsearch_5finner_2eproto[13]);
}

// ===================================================================

class SearchItemScore::_Internal {
 public:
  static const ::com::sekirocc::common::FaceFeature& feature(const SearchItemScore* msg);
};

const ::com::sekirocc::common::FaceFeature&
SearchItemScore::_Internal::feature(const SearchItemScore* msg) {
  return *msg->_impl_.feature_;
}
void SearchItemScore::clear_feature() {
  if (GetArenaForAllocation() == nullptr && _impl_.feature_ != nullptr) {
    delete _impl_.feature_;
  }
  _impl_.feature_ = nullptr;
}
SearchItemScore::SearchItemScore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_search.inner.SearchItemScore)
}
SearchItemScore::SearchItemScore(const SearchItemScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchItemScore* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_id_){}
    , decltype(_impl_.feature_){nullptr}
    , decltype(_impl_.score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db_id().empty()) {
    _this->_impl_.db_id_.Set(from._internal_db_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_feature()) {
    _this->_impl_.feature_ = new ::com::sekirocc::common::FaceFeature(*from._impl_.feature_);
  }
  _this->_impl_.score_ = from._impl_.score_;
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_search.inner.SearchItemScore)
}

inline void SearchItemScore::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_id_){}
    , decltype(_impl_.feature_){nullptr}
    , decltype(_impl_.score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchItemScore::~SearchItemScore() {
  // @@protoc_insertion_point(destructor:com.sekirocc.feature_search.inner.SearchItemScore)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchItemScore::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.feature_;
}

void SearchItemScore::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchItemScore::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.feature_search.inner.SearchItemScore)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.feature_ != nullptr) {
    delete _impl_.feature_;
  }
  _impl_.feature_ = nullptr;
  _impl_.score_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchItemScore::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.sekirocc.feature_search.inner.SearchItemScore.db_id"));
        } else
          goto handle_unusual;
        continue;
      // .com.sekirocc.common.FaceFeature feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchItemScore::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.feature_search.inner.SearchItemScore)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db_id = 1;
  if (!this->_internal_db_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db_id().data(), static_cast<int>(this->_internal_db_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.sekirocc.feature_search.inner.SearchItemScore.db_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db_id(), target);
  }

  // .com.sekirocc.common.FaceFeature feature = 2;
  if (this->_internal_has_feature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::feature(this),
        _Internal::feature(this).GetCachedSize(), target, stream);
  }

  // float score = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.feature_search.inner.SearchItemScore)
  return target;
}

size_t SearchItemScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.feature_search.inner.SearchItemScore)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db_id = 1;
  if (!this->_internal_db_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db_id());
  }

  // .com.sekirocc.common.FaceFeature feature = 2;
  if (this->_internal_has_feature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.feature_);
  }

  // float score = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchItemScore::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchItemScore::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchItemScore::GetClassData() const { return &_class_data_; }


void SearchItemScore::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchItemScore*>(&to_msg);
  auto& from = static_cast<const SearchItemScore&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.feature_search.inner.SearchItemScore)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db_id().empty()) {
    _this->_internal_set_db_id(from._internal_db_id());
  }
  if (from._internal_has_feature()) {
    _this->_internal_mutable_feature()->::com::sekirocc::common::FaceFeature::MergeFrom(
        from._internal_feature());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = from._internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchItemScore::CopyFrom(const SearchItemScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.feature_search.inner.SearchItemScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchItemScore::IsInitialized() const {
  return true;
}

void SearchItemScore::InternalSwap(SearchItemScore* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_id_, lhs_arena,
      &other->_impl_.db_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchItemScore, _impl_.score_)
      + sizeof(SearchItemScore::_impl_.score_)
      - PROTOBUF_FIELD_OFFSET(SearchItemScore, _impl_.feature_)>(
          reinterpret_cast<char*>(&_impl_.feature_),
          reinterpret_cast<char*>(&other->_impl_.feature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchItemScore::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fsearch_5finner_2eproto_getter, &descriptor_table_feature_5fsearch_5finner_2eproto_once,
      file_level_metadata_feature_5fsearch_5finner_2eproto[14]);
}

// ===================================================================

class SearchFeatureResponse::_Internal {
 public:
};

SearchFeatureResponse::SearchFeatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_search.inner.SearchFeatureResponse)
}
SearchFeatureResponse::SearchFeatureResponse(const SearchFeatureResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchFeatureResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_search.inner.SearchFeatureResponse)
}

inline void SearchFeatureResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchFeatureResponse::~SearchFeatureResponse() {
  // @@protoc_insertion_point(destructor:com.sekirocc.feature_search.inner.SearchFeatureResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchFeatureResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void SearchFeatureResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchFeatureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.feature_search.inner.SearchFeatureResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchFeatureResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.common.ResultCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::com::sekirocc::common::ResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.sekirocc.feature_search.inner.SearchItemScore items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchFeatureResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.feature_search.inner.SearchFeatureResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.common.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // repeated .com.sekirocc.feature_search.inner.SearchItemScore items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.feature_search.inner.SearchFeatureResponse)
  return target;
}

size_t SearchFeatureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.feature_search.inner.SearchFeatureResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.sekirocc.feature_search.inner.SearchItemScore items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .com.sekirocc.common.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchFeatureResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchFeatureResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchFeatureResponse::GetClassData() const { return &_class_data_; }


void SearchFeatureResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchFeatureResponse*>(&to_msg);
  auto& from = static_cast<const SearchFeatureResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.feature_search.inner.SearchFeatureResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchFeatureResponse::CopyFrom(const SearchFeatureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.feature_search.inner.SearchFeatureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchFeatureResponse::IsInitialized() const {
  return true;
}

void SearchFeatureResponse::InternalSwap(SearchFeatureResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchFeatureResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fsearch_5finner_2eproto_getter, &descriptor_table_feature_5fsearch_5finner_2eproto_once,
      file_level_metadata_feature_5fsearch_5finner_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace inner
}  // namespace feature_search
}  // namespace sekirocc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_search::inner::AssignDBShardsRequest*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_search::inner::AssignDBShardsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_search::inner::AssignDBShardsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_search::inner::AssignDBShardsResponse*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_search::inner::AssignDBShardsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_search::inner::AssignDBShardsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_search::inner::GetSystemInfoRequest*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_search::inner::GetSystemInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_search::inner::GetSystemInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_search::inner::WorkerInfo*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_search::inner::WorkerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_search::inner::WorkerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_search::inner::GetSystemInfoResponse*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_search::inner::GetSystemInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_search::inner::GetSystemInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_search::inner::TrainIndexRequest*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_search::inner::TrainIndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_search::inner::TrainIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_search::inner::TrainIndexResponse*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_search::inner::TrainIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_search::inner::TrainIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_search::inner::AddFeatureItem_MetaEntry_DoNotUse*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_search::inner::AddFeatureItem_MetaEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_search::inner::AddFeatureItem_MetaEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_search::inner::AddFeatureItem*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_search::inner::AddFeatureItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_search::inner::AddFeatureItem >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_search::inner::SearchFeatureRequest*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_search::inner::SearchFeatureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_search::inner::SearchFeatureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_search::inner::SearchItemScore*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_search::inner::SearchItemScore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_search::inner::SearchItemScore >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_search::inner::SearchFeatureResponse*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_search::inner::SearchFeatureResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_search::inner::SearchFeatureResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
