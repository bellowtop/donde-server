// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feature_extract.proto

#include "feature_extract.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace sekirocc {
namespace feature_extract {
PROTOBUF_CONSTEXPR DetectionRequest::DetectionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DetectionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectionRequestDefaultTypeInternal() {}
  union {
    DetectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectionRequestDefaultTypeInternal _DetectionRequest_default_instance_;
PROTOBUF_CONSTEXPR DetectionResponse::DetectionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.face_rects_)*/{}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DetectionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectionResponseDefaultTypeInternal() {}
  union {
    DetectionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectionResponseDefaultTypeInternal _DetectionResponse_default_instance_;
PROTOBUF_CONSTEXPR ExtractionRequest::ExtractionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtractionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtractionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtractionRequestDefaultTypeInternal() {}
  union {
    ExtractionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtractionRequestDefaultTypeInternal _ExtractionRequest_default_instance_;
PROTOBUF_CONSTEXPR ExtractionResponse::ExtractionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.face_rects_)*/{}
  , /*decltype(_impl_.face_features_)*/{}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtractionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtractionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtractionResponseDefaultTypeInternal() {}
  union {
    ExtractionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtractionResponseDefaultTypeInternal _ExtractionResponse_default_instance_;
PROTOBUF_CONSTEXPR CompareRequest::CompareRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.one_)*/nullptr
  , /*decltype(_impl_.two_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompareRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompareRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompareRequestDefaultTypeInternal() {}
  union {
    CompareRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompareRequestDefaultTypeInternal _CompareRequest_default_instance_;
PROTOBUF_CONSTEXPR CompareResponse::CompareResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompareResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompareResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompareResponseDefaultTypeInternal() {}
  union {
    CompareResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompareResponseDefaultTypeInternal _CompareResponse_default_instance_;
}  // namespace feature_extract
}  // namespace sekirocc
}  // namespace com
static ::_pb::Metadata file_level_metadata_feature_5fextract_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_feature_5fextract_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_feature_5fextract_2eproto = nullptr;

const uint32_t TableStruct_feature_5fextract_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_extract::DetectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_extract::DetectionRequest, _impl_.image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_extract::DetectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_extract::DetectionResponse, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_extract::DetectionResponse, _impl_.face_rects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_extract::ExtractionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_extract::ExtractionRequest, _impl_.image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_extract::ExtractionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_extract::ExtractionResponse, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_extract::ExtractionResponse, _impl_.face_rects_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_extract::ExtractionResponse, _impl_.face_features_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_extract::CompareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_extract::CompareRequest, _impl_.one_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_extract::CompareRequest, _impl_.two_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_extract::CompareResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_extract::CompareResponse, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::feature_extract::CompareResponse, _impl_.score_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::sekirocc::feature_extract::DetectionRequest)},
  { 7, -1, -1, sizeof(::com::sekirocc::feature_extract::DetectionResponse)},
  { 15, -1, -1, sizeof(::com::sekirocc::feature_extract::ExtractionRequest)},
  { 22, -1, -1, sizeof(::com::sekirocc::feature_extract::ExtractionResponse)},
  { 31, -1, -1, sizeof(::com::sekirocc::feature_extract::CompareRequest)},
  { 39, -1, -1, sizeof(::com::sekirocc::feature_extract::CompareResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::sekirocc::feature_extract::_DetectionRequest_default_instance_._instance,
  &::com::sekirocc::feature_extract::_DetectionResponse_default_instance_._instance,
  &::com::sekirocc::feature_extract::_ExtractionRequest_default_instance_._instance,
  &::com::sekirocc::feature_extract::_ExtractionResponse_default_instance_._instance,
  &::com::sekirocc::feature_extract::_CompareRequest_default_instance_._instance,
  &::com::sekirocc::feature_extract::_CompareResponse_default_instance_._instance,
};

const char descriptor_table_protodef_feature_5fextract_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025feature_extract.proto\022\034com.sekirocc.fe"
  "ature_extract\032\034google/api/annotations.pr"
  "oto\032\014common.proto\"=\n\020DetectionRequest\022)\n"
  "\005image\030\001 \001(\0132\032.com.sekirocc.common.Image"
  "\"z\n\021DetectionResponse\022-\n\004code\030\001 \001(\0162\037.co"
  "m.sekirocc.common.ResultCode\0226\n\nface_rec"
  "ts\030\002 \003(\0132\".com.sekirocc.common.FaceRecta"
  "ngle\">\n\021ExtractionRequest\022)\n\005image\030\001 \001(\013"
  "2\032.com.sekirocc.common.Image\"\264\001\n\022Extract"
  "ionResponse\022-\n\004code\030\001 \001(\0162\037.com.sekirocc"
  ".common.ResultCode\0226\n\nface_rects\030\002 \003(\0132\""
  ".com.sekirocc.common.FaceRectangle\0227\n\rfa"
  "ce_features\030\003 \003(\0132 .com.sekirocc.common."
  "FaceFeature\"n\n\016CompareRequest\022-\n\003one\030\001 \001"
  "(\0132 .com.sekirocc.common.FaceFeature\022-\n\003"
  "two\030\002 \001(\0132 .com.sekirocc.common.FaceFeat"
  "ure\"O\n\017CompareResponse\022-\n\004code\030\001 \001(\0162\037.c"
  "om.sekirocc.common.ResultCode\022\r\n\005score\030\002"
  " \001(\0022\274\003\n\013FaceService\022\202\001\n\006Detect\022..com.se"
  "kirocc.feature_extract.DetectionRequest\032"
  "/.com.sekirocc.feature_extract.Detection"
  "Response\"\027\202\323\344\223\002\021\"\014/detect_face:\001*\022\225\001\n\016Ex"
  "tractFeature\022/.com.sekirocc.feature_extr"
  "act.ExtractionRequest\0320.com.sekirocc.fea"
  "ture_extract.ExtractionResponse\" \202\323\344\223\002\032\""
  "\025/extract_face_feature:\001*\022\217\001\n\016CompareFea"
  "ture\022,.com.sekirocc.feature_extract.Comp"
  "areRequest\032-.com.sekirocc.feature_extrac"
  "t.CompareResponse\" \202\323\344\223\002\032\"\025/compare_face"
  "_feature:\001*B>Z<github.com/sekirocc/face-"
  "recognition-service/feature_extractb\006pro"
  "to3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_feature_5fextract_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::_pbi::once_flag descriptor_table_feature_5fextract_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_feature_5fextract_2eproto = {
    false, false, 1243, descriptor_table_protodef_feature_5fextract_2eproto,
    "feature_extract.proto",
    &descriptor_table_feature_5fextract_2eproto_once, descriptor_table_feature_5fextract_2eproto_deps, 2, 6,
    schemas, file_default_instances, TableStruct_feature_5fextract_2eproto::offsets,
    file_level_metadata_feature_5fextract_2eproto, file_level_enum_descriptors_feature_5fextract_2eproto,
    file_level_service_descriptors_feature_5fextract_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_feature_5fextract_2eproto_getter() {
  return &descriptor_table_feature_5fextract_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_feature_5fextract_2eproto(&descriptor_table_feature_5fextract_2eproto);
namespace com {
namespace sekirocc {
namespace feature_extract {

// ===================================================================

class DetectionRequest::_Internal {
 public:
  static const ::com::sekirocc::common::Image& image(const DetectionRequest* msg);
};

const ::com::sekirocc::common::Image&
DetectionRequest::_Internal::image(const DetectionRequest* msg) {
  return *msg->_impl_.image_;
}
void DetectionRequest::clear_image() {
  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
}
DetectionRequest::DetectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_extract.DetectionRequest)
}
DetectionRequest::DetectionRequest(const DetectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DetectionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::com::sekirocc::common::Image(*from._impl_.image_);
  }
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_extract.DetectionRequest)
}

inline void DetectionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DetectionRequest::~DetectionRequest() {
  // @@protoc_insertion_point(destructor:com.sekirocc.feature_extract.DetectionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.image_;
}

void DetectionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.feature_extract.DetectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.common.Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.feature_extract.DetectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.common.Image image = 1;
  if (this->_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.feature_extract.DetectionRequest)
  return target;
}

size_t DetectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.feature_extract.DetectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.sekirocc.common.Image image = 1;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.image_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DetectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectionRequest::GetClassData() const { return &_class_data_; }


void DetectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DetectionRequest*>(&to_msg);
  auto& from = static_cast<const DetectionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.feature_extract.DetectionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _this->_internal_mutable_image()->::com::sekirocc::common::Image::MergeFrom(
        from._internal_image());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectionRequest::CopyFrom(const DetectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.feature_extract.DetectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionRequest::IsInitialized() const {
  return true;
}

void DetectionRequest::InternalSwap(DetectionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.image_, other->_impl_.image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fextract_2eproto_getter, &descriptor_table_feature_5fextract_2eproto_once,
      file_level_metadata_feature_5fextract_2eproto[0]);
}

// ===================================================================

class DetectionResponse::_Internal {
 public:
};

void DetectionResponse::clear_face_rects() {
  _impl_.face_rects_.Clear();
}
DetectionResponse::DetectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_extract.DetectionResponse)
}
DetectionResponse::DetectionResponse(const DetectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DetectionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.face_rects_){from._impl_.face_rects_}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_extract.DetectionResponse)
}

inline void DetectionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.face_rects_){arena}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DetectionResponse::~DetectionResponse() {
  // @@protoc_insertion_point(destructor:com.sekirocc.feature_extract.DetectionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.face_rects_.~RepeatedPtrField();
}

void DetectionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.feature_extract.DetectionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.face_rects_.Clear();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetectionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.common.ResultCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::com::sekirocc::common::ResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.sekirocc.common.FaceRectangle face_rects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_face_rects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetectionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.feature_extract.DetectionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.common.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // repeated .com.sekirocc.common.FaceRectangle face_rects = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_face_rects_size()); i < n; i++) {
    const auto& repfield = this->_internal_face_rects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.feature_extract.DetectionResponse)
  return target;
}

size_t DetectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.feature_extract.DetectionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.sekirocc.common.FaceRectangle face_rects = 2;
  total_size += 1UL * this->_internal_face_rects_size();
  for (const auto& msg : this->_impl_.face_rects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .com.sekirocc.common.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetectionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DetectionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetectionResponse::GetClassData() const { return &_class_data_; }


void DetectionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DetectionResponse*>(&to_msg);
  auto& from = static_cast<const DetectionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.feature_extract.DetectionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.face_rects_.MergeFrom(from._impl_.face_rects_);
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetectionResponse::CopyFrom(const DetectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.feature_extract.DetectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionResponse::IsInitialized() const {
  return true;
}

void DetectionResponse::InternalSwap(DetectionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.face_rects_.InternalSwap(&other->_impl_.face_rects_);
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fextract_2eproto_getter, &descriptor_table_feature_5fextract_2eproto_once,
      file_level_metadata_feature_5fextract_2eproto[1]);
}

// ===================================================================

class ExtractionRequest::_Internal {
 public:
  static const ::com::sekirocc::common::Image& image(const ExtractionRequest* msg);
};

const ::com::sekirocc::common::Image&
ExtractionRequest::_Internal::image(const ExtractionRequest* msg) {
  return *msg->_impl_.image_;
}
void ExtractionRequest::clear_image() {
  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
}
ExtractionRequest::ExtractionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_extract.ExtractionRequest)
}
ExtractionRequest::ExtractionRequest(const ExtractionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtractionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::com::sekirocc::common::Image(*from._impl_.image_);
  }
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_extract.ExtractionRequest)
}

inline void ExtractionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExtractionRequest::~ExtractionRequest() {
  // @@protoc_insertion_point(destructor:com.sekirocc.feature_extract.ExtractionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtractionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.image_;
}

void ExtractionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtractionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.feature_extract.ExtractionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.image_ != nullptr) {
    delete _impl_.image_;
  }
  _impl_.image_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtractionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.common.Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtractionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.feature_extract.ExtractionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.common.Image image = 1;
  if (this->_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.feature_extract.ExtractionRequest)
  return target;
}

size_t ExtractionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.feature_extract.ExtractionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.sekirocc.common.Image image = 1;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.image_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtractionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtractionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtractionRequest::GetClassData() const { return &_class_data_; }


void ExtractionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtractionRequest*>(&to_msg);
  auto& from = static_cast<const ExtractionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.feature_extract.ExtractionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _this->_internal_mutable_image()->::com::sekirocc::common::Image::MergeFrom(
        from._internal_image());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtractionRequest::CopyFrom(const ExtractionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.feature_extract.ExtractionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtractionRequest::IsInitialized() const {
  return true;
}

void ExtractionRequest::InternalSwap(ExtractionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.image_, other->_impl_.image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtractionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fextract_2eproto_getter, &descriptor_table_feature_5fextract_2eproto_once,
      file_level_metadata_feature_5fextract_2eproto[2]);
}

// ===================================================================

class ExtractionResponse::_Internal {
 public:
};

void ExtractionResponse::clear_face_rects() {
  _impl_.face_rects_.Clear();
}
void ExtractionResponse::clear_face_features() {
  _impl_.face_features_.Clear();
}
ExtractionResponse::ExtractionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_extract.ExtractionResponse)
}
ExtractionResponse::ExtractionResponse(const ExtractionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtractionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.face_rects_){from._impl_.face_rects_}
    , decltype(_impl_.face_features_){from._impl_.face_features_}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_extract.ExtractionResponse)
}

inline void ExtractionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.face_rects_){arena}
    , decltype(_impl_.face_features_){arena}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExtractionResponse::~ExtractionResponse() {
  // @@protoc_insertion_point(destructor:com.sekirocc.feature_extract.ExtractionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtractionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.face_rects_.~RepeatedPtrField();
  _impl_.face_features_.~RepeatedPtrField();
}

void ExtractionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtractionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.feature_extract.ExtractionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.face_rects_.Clear();
  _impl_.face_features_.Clear();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtractionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.common.ResultCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::com::sekirocc::common::ResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.sekirocc.common.FaceRectangle face_rects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_face_rects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.sekirocc.common.FaceFeature face_features = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_face_features(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtractionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.feature_extract.ExtractionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.common.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // repeated .com.sekirocc.common.FaceRectangle face_rects = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_face_rects_size()); i < n; i++) {
    const auto& repfield = this->_internal_face_rects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .com.sekirocc.common.FaceFeature face_features = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_face_features_size()); i < n; i++) {
    const auto& repfield = this->_internal_face_features(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.feature_extract.ExtractionResponse)
  return target;
}

size_t ExtractionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.feature_extract.ExtractionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.sekirocc.common.FaceRectangle face_rects = 2;
  total_size += 1UL * this->_internal_face_rects_size();
  for (const auto& msg : this->_impl_.face_rects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.sekirocc.common.FaceFeature face_features = 3;
  total_size += 1UL * this->_internal_face_features_size();
  for (const auto& msg : this->_impl_.face_features_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .com.sekirocc.common.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtractionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtractionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtractionResponse::GetClassData() const { return &_class_data_; }


void ExtractionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtractionResponse*>(&to_msg);
  auto& from = static_cast<const ExtractionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.feature_extract.ExtractionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.face_rects_.MergeFrom(from._impl_.face_rects_);
  _this->_impl_.face_features_.MergeFrom(from._impl_.face_features_);
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtractionResponse::CopyFrom(const ExtractionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.feature_extract.ExtractionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtractionResponse::IsInitialized() const {
  return true;
}

void ExtractionResponse::InternalSwap(ExtractionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.face_rects_.InternalSwap(&other->_impl_.face_rects_);
  _impl_.face_features_.InternalSwap(&other->_impl_.face_features_);
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtractionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fextract_2eproto_getter, &descriptor_table_feature_5fextract_2eproto_once,
      file_level_metadata_feature_5fextract_2eproto[3]);
}

// ===================================================================

class CompareRequest::_Internal {
 public:
  static const ::com::sekirocc::common::FaceFeature& one(const CompareRequest* msg);
  static const ::com::sekirocc::common::FaceFeature& two(const CompareRequest* msg);
};

const ::com::sekirocc::common::FaceFeature&
CompareRequest::_Internal::one(const CompareRequest* msg) {
  return *msg->_impl_.one_;
}
const ::com::sekirocc::common::FaceFeature&
CompareRequest::_Internal::two(const CompareRequest* msg) {
  return *msg->_impl_.two_;
}
void CompareRequest::clear_one() {
  if (GetArenaForAllocation() == nullptr && _impl_.one_ != nullptr) {
    delete _impl_.one_;
  }
  _impl_.one_ = nullptr;
}
void CompareRequest::clear_two() {
  if (GetArenaForAllocation() == nullptr && _impl_.two_ != nullptr) {
    delete _impl_.two_;
  }
  _impl_.two_ = nullptr;
}
CompareRequest::CompareRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_extract.CompareRequest)
}
CompareRequest::CompareRequest(const CompareRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompareRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.one_){nullptr}
    , decltype(_impl_.two_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_one()) {
    _this->_impl_.one_ = new ::com::sekirocc::common::FaceFeature(*from._impl_.one_);
  }
  if (from._internal_has_two()) {
    _this->_impl_.two_ = new ::com::sekirocc::common::FaceFeature(*from._impl_.two_);
  }
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_extract.CompareRequest)
}

inline void CompareRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.one_){nullptr}
    , decltype(_impl_.two_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CompareRequest::~CompareRequest() {
  // @@protoc_insertion_point(destructor:com.sekirocc.feature_extract.CompareRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompareRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.one_;
  if (this != internal_default_instance()) delete _impl_.two_;
}

void CompareRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.feature_extract.CompareRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.one_ != nullptr) {
    delete _impl_.one_;
  }
  _impl_.one_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.two_ != nullptr) {
    delete _impl_.two_;
  }
  _impl_.two_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompareRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.common.FaceFeature one = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_one(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.sekirocc.common.FaceFeature two = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_two(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompareRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.feature_extract.CompareRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.common.FaceFeature one = 1;
  if (this->_internal_has_one()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::one(this),
        _Internal::one(this).GetCachedSize(), target, stream);
  }

  // .com.sekirocc.common.FaceFeature two = 2;
  if (this->_internal_has_two()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::two(this),
        _Internal::two(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.feature_extract.CompareRequest)
  return target;
}

size_t CompareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.feature_extract.CompareRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.sekirocc.common.FaceFeature one = 1;
  if (this->_internal_has_one()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.one_);
  }

  // .com.sekirocc.common.FaceFeature two = 2;
  if (this->_internal_has_two()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.two_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompareRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompareRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompareRequest::GetClassData() const { return &_class_data_; }


void CompareRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompareRequest*>(&to_msg);
  auto& from = static_cast<const CompareRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.feature_extract.CompareRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_one()) {
    _this->_internal_mutable_one()->::com::sekirocc::common::FaceFeature::MergeFrom(
        from._internal_one());
  }
  if (from._internal_has_two()) {
    _this->_internal_mutable_two()->::com::sekirocc::common::FaceFeature::MergeFrom(
        from._internal_two());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompareRequest::CopyFrom(const CompareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.feature_extract.CompareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompareRequest::IsInitialized() const {
  return true;
}

void CompareRequest::InternalSwap(CompareRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompareRequest, _impl_.two_)
      + sizeof(CompareRequest::_impl_.two_)
      - PROTOBUF_FIELD_OFFSET(CompareRequest, _impl_.one_)>(
          reinterpret_cast<char*>(&_impl_.one_),
          reinterpret_cast<char*>(&other->_impl_.one_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompareRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fextract_2eproto_getter, &descriptor_table_feature_5fextract_2eproto_once,
      file_level_metadata_feature_5fextract_2eproto[4]);
}

// ===================================================================

class CompareResponse::_Internal {
 public:
};

CompareResponse::CompareResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.feature_extract.CompareResponse)
}
CompareResponse::CompareResponse(const CompareResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompareResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.code_, &from._impl_.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.score_) -
    reinterpret_cast<char*>(&_impl_.code_)) + sizeof(_impl_.score_));
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.feature_extract.CompareResponse)
}

inline void CompareResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){0}
    , decltype(_impl_.score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CompareResponse::~CompareResponse() {
  // @@protoc_insertion_point(destructor:com.sekirocc.feature_extract.CompareResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompareResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CompareResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.feature_extract.CompareResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.score_) -
      reinterpret_cast<char*>(&_impl_.code_)) + sizeof(_impl_.score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompareResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.common.ResultCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::com::sekirocc::common::ResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      // float score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompareResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.feature_extract.CompareResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.common.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // float score = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.feature_extract.CompareResponse)
  return target;
}

size_t CompareResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.feature_extract.CompareResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.sekirocc.common.ResultCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  // float score = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompareResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompareResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompareResponse::GetClassData() const { return &_class_data_; }


void CompareResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompareResponse*>(&to_msg);
  auto& from = static_cast<const CompareResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.feature_extract.CompareResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = from._internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompareResponse::CopyFrom(const CompareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.feature_extract.CompareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompareResponse::IsInitialized() const {
  return true;
}

void CompareResponse::InternalSwap(CompareResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompareResponse, _impl_.score_)
      + sizeof(CompareResponse::_impl_.score_)
      - PROTOBUF_FIELD_OFFSET(CompareResponse, _impl_.code_)>(
          reinterpret_cast<char*>(&_impl_.code_),
          reinterpret_cast<char*>(&other->_impl_.code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompareResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_feature_5fextract_2eproto_getter, &descriptor_table_feature_5fextract_2eproto_once,
      file_level_metadata_feature_5fextract_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace feature_extract
}  // namespace sekirocc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_extract::DetectionRequest*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_extract::DetectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_extract::DetectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_extract::DetectionResponse*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_extract::DetectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_extract::DetectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_extract::ExtractionRequest*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_extract::ExtractionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_extract::ExtractionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_extract::ExtractionResponse*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_extract::ExtractionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_extract::ExtractionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_extract::CompareRequest*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_extract::CompareRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_extract::CompareRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::feature_extract::CompareResponse*
Arena::CreateMaybeMessage< ::com::sekirocc::feature_extract::CompareResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::feature_extract::CompareResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
