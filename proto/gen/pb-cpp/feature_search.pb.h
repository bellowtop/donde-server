// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feature_search.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_feature_5fsearch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_feature_5fsearch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_feature_5fsearch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_feature_5fsearch_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_feature_5fsearch_2eproto;
namespace com {
namespace sekirocc {
namespace face_service {
class AddFeatureItem;
struct AddFeatureItemDefaultTypeInternal;
extern AddFeatureItemDefaultTypeInternal _AddFeatureItem_default_instance_;
class AddFeatureItem_MetaEntry_DoNotUse;
struct AddFeatureItem_MetaEntry_DoNotUseDefaultTypeInternal;
extern AddFeatureItem_MetaEntry_DoNotUseDefaultTypeInternal _AddFeatureItem_MetaEntry_DoNotUse_default_instance_;
class AddFeatureRequest;
struct AddFeatureRequestDefaultTypeInternal;
extern AddFeatureRequestDefaultTypeInternal _AddFeatureRequest_default_instance_;
class AddFeatureResponse;
struct AddFeatureResponseDefaultTypeInternal;
extern AddFeatureResponseDefaultTypeInternal _AddFeatureResponse_default_instance_;
class DeleteFeatureRequest;
struct DeleteFeatureRequestDefaultTypeInternal;
extern DeleteFeatureRequestDefaultTypeInternal _DeleteFeatureRequest_default_instance_;
class DeleteFeatureResponse;
struct DeleteFeatureResponseDefaultTypeInternal;
extern DeleteFeatureResponseDefaultTypeInternal _DeleteFeatureResponse_default_instance_;
class SearchFeatureRequest;
struct SearchFeatureRequestDefaultTypeInternal;
extern SearchFeatureRequestDefaultTypeInternal _SearchFeatureRequest_default_instance_;
class SearchFeatureResponse;
struct SearchFeatureResponseDefaultTypeInternal;
extern SearchFeatureResponseDefaultTypeInternal _SearchFeatureResponse_default_instance_;
class SearchItemScore;
struct SearchItemScoreDefaultTypeInternal;
extern SearchItemScoreDefaultTypeInternal _SearchItemScore_default_instance_;
class TrainIndexRequest;
struct TrainIndexRequestDefaultTypeInternal;
extern TrainIndexRequestDefaultTypeInternal _TrainIndexRequest_default_instance_;
class TrainIndexResponse;
struct TrainIndexResponseDefaultTypeInternal;
extern TrainIndexResponseDefaultTypeInternal _TrainIndexResponse_default_instance_;
}  // namespace face_service
}  // namespace sekirocc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::sekirocc::face_service::AddFeatureItem* Arena::CreateMaybeMessage<::com::sekirocc::face_service::AddFeatureItem>(Arena*);
template<> ::com::sekirocc::face_service::AddFeatureItem_MetaEntry_DoNotUse* Arena::CreateMaybeMessage<::com::sekirocc::face_service::AddFeatureItem_MetaEntry_DoNotUse>(Arena*);
template<> ::com::sekirocc::face_service::AddFeatureRequest* Arena::CreateMaybeMessage<::com::sekirocc::face_service::AddFeatureRequest>(Arena*);
template<> ::com::sekirocc::face_service::AddFeatureResponse* Arena::CreateMaybeMessage<::com::sekirocc::face_service::AddFeatureResponse>(Arena*);
template<> ::com::sekirocc::face_service::DeleteFeatureRequest* Arena::CreateMaybeMessage<::com::sekirocc::face_service::DeleteFeatureRequest>(Arena*);
template<> ::com::sekirocc::face_service::DeleteFeatureResponse* Arena::CreateMaybeMessage<::com::sekirocc::face_service::DeleteFeatureResponse>(Arena*);
template<> ::com::sekirocc::face_service::SearchFeatureRequest* Arena::CreateMaybeMessage<::com::sekirocc::face_service::SearchFeatureRequest>(Arena*);
template<> ::com::sekirocc::face_service::SearchFeatureResponse* Arena::CreateMaybeMessage<::com::sekirocc::face_service::SearchFeatureResponse>(Arena*);
template<> ::com::sekirocc::face_service::SearchItemScore* Arena::CreateMaybeMessage<::com::sekirocc::face_service::SearchItemScore>(Arena*);
template<> ::com::sekirocc::face_service::TrainIndexRequest* Arena::CreateMaybeMessage<::com::sekirocc::face_service::TrainIndexRequest>(Arena*);
template<> ::com::sekirocc::face_service::TrainIndexResponse* Arena::CreateMaybeMessage<::com::sekirocc::face_service::TrainIndexResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace sekirocc {
namespace face_service {

// ===================================================================

class TrainIndexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:com.sekirocc.face_service.TrainIndexRequest) */ {
 public:
  inline TrainIndexRequest() : TrainIndexRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TrainIndexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrainIndexRequest(const TrainIndexRequest& from);
  TrainIndexRequest(TrainIndexRequest&& from) noexcept
    : TrainIndexRequest() {
    *this = ::std::move(from);
  }

  inline TrainIndexRequest& operator=(const TrainIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainIndexRequest& operator=(TrainIndexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrainIndexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrainIndexRequest* internal_default_instance() {
    return reinterpret_cast<const TrainIndexRequest*>(
               &_TrainIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrainIndexRequest& a, TrainIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainIndexRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainIndexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrainIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrainIndexRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TrainIndexRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TrainIndexRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.face_service.TrainIndexRequest";
  }
  protected:
  explicit TrainIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.sekirocc.face_service.TrainIndexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_feature_5fsearch_2eproto;
};
// -------------------------------------------------------------------

class TrainIndexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.face_service.TrainIndexResponse) */ {
 public:
  inline TrainIndexResponse() : TrainIndexResponse(nullptr) {}
  ~TrainIndexResponse() override;
  explicit PROTOBUF_CONSTEXPR TrainIndexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrainIndexResponse(const TrainIndexResponse& from);
  TrainIndexResponse(TrainIndexResponse&& from) noexcept
    : TrainIndexResponse() {
    *this = ::std::move(from);
  }

  inline TrainIndexResponse& operator=(const TrainIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainIndexResponse& operator=(TrainIndexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrainIndexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrainIndexResponse* internal_default_instance() {
    return reinterpret_cast<const TrainIndexResponse*>(
               &_TrainIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrainIndexResponse& a, TrainIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainIndexResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainIndexResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrainIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrainIndexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrainIndexResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrainIndexResponse& from) {
    TrainIndexResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainIndexResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.face_service.TrainIndexResponse";
  }
  protected:
  explicit TrainIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // .com.sekirocc.face_service.ResultCode code = 1;
  void clear_code();
  ::com::sekirocc::face_service::ResultCode code() const;
  void set_code(::com::sekirocc::face_service::ResultCode value);
  private:
  ::com::sekirocc::face_service::ResultCode _internal_code() const;
  void _internal_set_code(::com::sekirocc::face_service::ResultCode value);
  public:

  // @@protoc_insertion_point(class_scope:com.sekirocc.face_service.TrainIndexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feature_5fsearch_2eproto;
};
// -------------------------------------------------------------------

class AddFeatureItem_MetaEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AddFeatureItem_MetaEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AddFeatureItem_MetaEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AddFeatureItem_MetaEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR AddFeatureItem_MetaEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AddFeatureItem_MetaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AddFeatureItem_MetaEntry_DoNotUse& other);
  static const AddFeatureItem_MetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AddFeatureItem_MetaEntry_DoNotUse*>(&_AddFeatureItem_MetaEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "com.sekirocc.face_service.AddFeatureItem.MetaEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "com.sekirocc.face_service.AddFeatureItem.MetaEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_feature_5fsearch_2eproto;
};

// -------------------------------------------------------------------

class AddFeatureItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.face_service.AddFeatureItem) */ {
 public:
  inline AddFeatureItem() : AddFeatureItem(nullptr) {}
  ~AddFeatureItem() override;
  explicit PROTOBUF_CONSTEXPR AddFeatureItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFeatureItem(const AddFeatureItem& from);
  AddFeatureItem(AddFeatureItem&& from) noexcept
    : AddFeatureItem() {
    *this = ::std::move(from);
  }

  inline AddFeatureItem& operator=(const AddFeatureItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFeatureItem& operator=(AddFeatureItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFeatureItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFeatureItem* internal_default_instance() {
    return reinterpret_cast<const AddFeatureItem*>(
               &_AddFeatureItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AddFeatureItem& a, AddFeatureItem& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFeatureItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFeatureItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFeatureItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFeatureItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFeatureItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddFeatureItem& from) {
    AddFeatureItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFeatureItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.face_service.AddFeatureItem";
  }
  protected:
  explicit AddFeatureItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 2,
    kFeatureFieldNumber = 1,
  };
  // map<string, string> meta = 2;
  int meta_size() const;
  private:
  int _internal_meta_size() const;
  public:
  void clear_meta();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_meta() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_meta();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      meta() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_meta();

  // .com.sekirocc.face_service.FaceFeature feature = 1;
  bool has_feature() const;
  private:
  bool _internal_has_feature() const;
  public:
  void clear_feature();
  const ::com::sekirocc::face_service::FaceFeature& feature() const;
  PROTOBUF_NODISCARD ::com::sekirocc::face_service::FaceFeature* release_feature();
  ::com::sekirocc::face_service::FaceFeature* mutable_feature();
  void set_allocated_feature(::com::sekirocc::face_service::FaceFeature* feature);
  private:
  const ::com::sekirocc::face_service::FaceFeature& _internal_feature() const;
  ::com::sekirocc::face_service::FaceFeature* _internal_mutable_feature();
  public:
  void unsafe_arena_set_allocated_feature(
      ::com::sekirocc::face_service::FaceFeature* feature);
  ::com::sekirocc::face_service::FaceFeature* unsafe_arena_release_feature();

  // @@protoc_insertion_point(class_scope:com.sekirocc.face_service.AddFeatureItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        AddFeatureItem_MetaEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> meta_;
    ::com::sekirocc::face_service::FaceFeature* feature_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feature_5fsearch_2eproto;
};
// -------------------------------------------------------------------

class AddFeatureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.face_service.AddFeatureRequest) */ {
 public:
  inline AddFeatureRequest() : AddFeatureRequest(nullptr) {}
  ~AddFeatureRequest() override;
  explicit PROTOBUF_CONSTEXPR AddFeatureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFeatureRequest(const AddFeatureRequest& from);
  AddFeatureRequest(AddFeatureRequest&& from) noexcept
    : AddFeatureRequest() {
    *this = ::std::move(from);
  }

  inline AddFeatureRequest& operator=(const AddFeatureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFeatureRequest& operator=(AddFeatureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFeatureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFeatureRequest* internal_default_instance() {
    return reinterpret_cast<const AddFeatureRequest*>(
               &_AddFeatureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddFeatureRequest& a, AddFeatureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFeatureRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFeatureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFeatureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFeatureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFeatureRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddFeatureRequest& from) {
    AddFeatureRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFeatureRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.face_service.AddFeatureRequest";
  }
  protected:
  explicit AddFeatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureItemFieldNumber = 1,
  };
  // .com.sekirocc.face_service.AddFeatureItem feature_item = 1;
  bool has_feature_item() const;
  private:
  bool _internal_has_feature_item() const;
  public:
  void clear_feature_item();
  const ::com::sekirocc::face_service::AddFeatureItem& feature_item() const;
  PROTOBUF_NODISCARD ::com::sekirocc::face_service::AddFeatureItem* release_feature_item();
  ::com::sekirocc::face_service::AddFeatureItem* mutable_feature_item();
  void set_allocated_feature_item(::com::sekirocc::face_service::AddFeatureItem* feature_item);
  private:
  const ::com::sekirocc::face_service::AddFeatureItem& _internal_feature_item() const;
  ::com::sekirocc::face_service::AddFeatureItem* _internal_mutable_feature_item();
  public:
  void unsafe_arena_set_allocated_feature_item(
      ::com::sekirocc::face_service::AddFeatureItem* feature_item);
  ::com::sekirocc::face_service::AddFeatureItem* unsafe_arena_release_feature_item();

  // @@protoc_insertion_point(class_scope:com.sekirocc.face_service.AddFeatureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::com::sekirocc::face_service::AddFeatureItem* feature_item_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feature_5fsearch_2eproto;
};
// -------------------------------------------------------------------

class AddFeatureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.face_service.AddFeatureResponse) */ {
 public:
  inline AddFeatureResponse() : AddFeatureResponse(nullptr) {}
  ~AddFeatureResponse() override;
  explicit PROTOBUF_CONSTEXPR AddFeatureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFeatureResponse(const AddFeatureResponse& from);
  AddFeatureResponse(AddFeatureResponse&& from) noexcept
    : AddFeatureResponse() {
    *this = ::std::move(from);
  }

  inline AddFeatureResponse& operator=(const AddFeatureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFeatureResponse& operator=(AddFeatureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFeatureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFeatureResponse* internal_default_instance() {
    return reinterpret_cast<const AddFeatureResponse*>(
               &_AddFeatureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddFeatureResponse& a, AddFeatureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFeatureResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFeatureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFeatureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFeatureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFeatureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddFeatureResponse& from) {
    AddFeatureResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFeatureResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.face_service.AddFeatureResponse";
  }
  protected:
  explicit AddFeatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureIdFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string feature_id = 2;
  void clear_feature_id();
  const std::string& feature_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_feature_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_feature_id();
  PROTOBUF_NODISCARD std::string* release_feature_id();
  void set_allocated_feature_id(std::string* feature_id);
  private:
  const std::string& _internal_feature_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feature_id(const std::string& value);
  std::string* _internal_mutable_feature_id();
  public:

  // .com.sekirocc.face_service.ResultCode code = 1;
  void clear_code();
  ::com::sekirocc::face_service::ResultCode code() const;
  void set_code(::com::sekirocc::face_service::ResultCode value);
  private:
  ::com::sekirocc::face_service::ResultCode _internal_code() const;
  void _internal_set_code(::com::sekirocc::face_service::ResultCode value);
  public:

  // @@protoc_insertion_point(class_scope:com.sekirocc.face_service.AddFeatureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feature_id_;
    int code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feature_5fsearch_2eproto;
};
// -------------------------------------------------------------------

class DeleteFeatureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.face_service.DeleteFeatureRequest) */ {
 public:
  inline DeleteFeatureRequest() : DeleteFeatureRequest(nullptr) {}
  ~DeleteFeatureRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteFeatureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteFeatureRequest(const DeleteFeatureRequest& from);
  DeleteFeatureRequest(DeleteFeatureRequest&& from) noexcept
    : DeleteFeatureRequest() {
    *this = ::std::move(from);
  }

  inline DeleteFeatureRequest& operator=(const DeleteFeatureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteFeatureRequest& operator=(DeleteFeatureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteFeatureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteFeatureRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteFeatureRequest*>(
               &_DeleteFeatureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteFeatureRequest& a, DeleteFeatureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteFeatureRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteFeatureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteFeatureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteFeatureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteFeatureRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteFeatureRequest& from) {
    DeleteFeatureRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFeatureRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.face_service.DeleteFeatureRequest";
  }
  protected:
  explicit DeleteFeatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureIdFieldNumber = 1,
  };
  // string feature_id = 1;
  void clear_feature_id();
  const std::string& feature_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_feature_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_feature_id();
  PROTOBUF_NODISCARD std::string* release_feature_id();
  void set_allocated_feature_id(std::string* feature_id);
  private:
  const std::string& _internal_feature_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feature_id(const std::string& value);
  std::string* _internal_mutable_feature_id();
  public:

  // @@protoc_insertion_point(class_scope:com.sekirocc.face_service.DeleteFeatureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feature_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feature_5fsearch_2eproto;
};
// -------------------------------------------------------------------

class DeleteFeatureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.face_service.DeleteFeatureResponse) */ {
 public:
  inline DeleteFeatureResponse() : DeleteFeatureResponse(nullptr) {}
  ~DeleteFeatureResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteFeatureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteFeatureResponse(const DeleteFeatureResponse& from);
  DeleteFeatureResponse(DeleteFeatureResponse&& from) noexcept
    : DeleteFeatureResponse() {
    *this = ::std::move(from);
  }

  inline DeleteFeatureResponse& operator=(const DeleteFeatureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteFeatureResponse& operator=(DeleteFeatureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteFeatureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteFeatureResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteFeatureResponse*>(
               &_DeleteFeatureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteFeatureResponse& a, DeleteFeatureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteFeatureResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteFeatureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteFeatureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteFeatureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteFeatureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteFeatureResponse& from) {
    DeleteFeatureResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteFeatureResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.face_service.DeleteFeatureResponse";
  }
  protected:
  explicit DeleteFeatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // .com.sekirocc.face_service.ResultCode code = 1;
  void clear_code();
  ::com::sekirocc::face_service::ResultCode code() const;
  void set_code(::com::sekirocc::face_service::ResultCode value);
  private:
  ::com::sekirocc::face_service::ResultCode _internal_code() const;
  void _internal_set_code(::com::sekirocc::face_service::ResultCode value);
  public:

  // @@protoc_insertion_point(class_scope:com.sekirocc.face_service.DeleteFeatureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feature_5fsearch_2eproto;
};
// -------------------------------------------------------------------

class SearchFeatureRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.face_service.SearchFeatureRequest) */ {
 public:
  inline SearchFeatureRequest() : SearchFeatureRequest(nullptr) {}
  ~SearchFeatureRequest() override;
  explicit PROTOBUF_CONSTEXPR SearchFeatureRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchFeatureRequest(const SearchFeatureRequest& from);
  SearchFeatureRequest(SearchFeatureRequest&& from) noexcept
    : SearchFeatureRequest() {
    *this = ::std::move(from);
  }

  inline SearchFeatureRequest& operator=(const SearchFeatureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchFeatureRequest& operator=(SearchFeatureRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchFeatureRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchFeatureRequest* internal_default_instance() {
    return reinterpret_cast<const SearchFeatureRequest*>(
               &_SearchFeatureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SearchFeatureRequest& a, SearchFeatureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchFeatureRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchFeatureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchFeatureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchFeatureRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchFeatureRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchFeatureRequest& from) {
    SearchFeatureRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchFeatureRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.face_service.SearchFeatureRequest";
  }
  protected:
  explicit SearchFeatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kTopkFieldNumber = 2,
  };
  // .com.sekirocc.face_service.FaceFeature query = 1;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const ::com::sekirocc::face_service::FaceFeature& query() const;
  PROTOBUF_NODISCARD ::com::sekirocc::face_service::FaceFeature* release_query();
  ::com::sekirocc::face_service::FaceFeature* mutable_query();
  void set_allocated_query(::com::sekirocc::face_service::FaceFeature* query);
  private:
  const ::com::sekirocc::face_service::FaceFeature& _internal_query() const;
  ::com::sekirocc::face_service::FaceFeature* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      ::com::sekirocc::face_service::FaceFeature* query);
  ::com::sekirocc::face_service::FaceFeature* unsafe_arena_release_query();

  // int32 topk = 2;
  void clear_topk();
  int32_t topk() const;
  void set_topk(int32_t value);
  private:
  int32_t _internal_topk() const;
  void _internal_set_topk(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.sekirocc.face_service.SearchFeatureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::com::sekirocc::face_service::FaceFeature* query_;
    int32_t topk_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feature_5fsearch_2eproto;
};
// -------------------------------------------------------------------

class SearchItemScore final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.face_service.SearchItemScore) */ {
 public:
  inline SearchItemScore() : SearchItemScore(nullptr) {}
  ~SearchItemScore() override;
  explicit PROTOBUF_CONSTEXPR SearchItemScore(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchItemScore(const SearchItemScore& from);
  SearchItemScore(SearchItemScore&& from) noexcept
    : SearchItemScore() {
    *this = ::std::move(from);
  }

  inline SearchItemScore& operator=(const SearchItemScore& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchItemScore& operator=(SearchItemScore&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchItemScore& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchItemScore* internal_default_instance() {
    return reinterpret_cast<const SearchItemScore*>(
               &_SearchItemScore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SearchItemScore& a, SearchItemScore& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchItemScore* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchItemScore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchItemScore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchItemScore>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchItemScore& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchItemScore& from) {
    SearchItemScore::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchItemScore* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.face_service.SearchItemScore";
  }
  protected:
  explicit SearchItemScore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // .com.sekirocc.face_service.FaceFeature feature = 1;
  bool has_feature() const;
  private:
  bool _internal_has_feature() const;
  public:
  void clear_feature();
  const ::com::sekirocc::face_service::FaceFeature& feature() const;
  PROTOBUF_NODISCARD ::com::sekirocc::face_service::FaceFeature* release_feature();
  ::com::sekirocc::face_service::FaceFeature* mutable_feature();
  void set_allocated_feature(::com::sekirocc::face_service::FaceFeature* feature);
  private:
  const ::com::sekirocc::face_service::FaceFeature& _internal_feature() const;
  ::com::sekirocc::face_service::FaceFeature* _internal_mutable_feature();
  public:
  void unsafe_arena_set_allocated_feature(
      ::com::sekirocc::face_service::FaceFeature* feature);
  ::com::sekirocc::face_service::FaceFeature* unsafe_arena_release_feature();

  // float score = 2;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.sekirocc.face_service.SearchItemScore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::com::sekirocc::face_service::FaceFeature* feature_;
    float score_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feature_5fsearch_2eproto;
};
// -------------------------------------------------------------------

class SearchFeatureResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.sekirocc.face_service.SearchFeatureResponse) */ {
 public:
  inline SearchFeatureResponse() : SearchFeatureResponse(nullptr) {}
  ~SearchFeatureResponse() override;
  explicit PROTOBUF_CONSTEXPR SearchFeatureResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchFeatureResponse(const SearchFeatureResponse& from);
  SearchFeatureResponse(SearchFeatureResponse&& from) noexcept
    : SearchFeatureResponse() {
    *this = ::std::move(from);
  }

  inline SearchFeatureResponse& operator=(const SearchFeatureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchFeatureResponse& operator=(SearchFeatureResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchFeatureResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchFeatureResponse* internal_default_instance() {
    return reinterpret_cast<const SearchFeatureResponse*>(
               &_SearchFeatureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SearchFeatureResponse& a, SearchFeatureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchFeatureResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchFeatureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchFeatureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchFeatureResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchFeatureResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchFeatureResponse& from) {
    SearchFeatureResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchFeatureResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.sekirocc.face_service.SearchFeatureResponse";
  }
  protected:
  explicit SearchFeatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .com.sekirocc.face_service.SearchItemScore items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::com::sekirocc::face_service::SearchItemScore* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::face_service::SearchItemScore >*
      mutable_items();
  private:
  const ::com::sekirocc::face_service::SearchItemScore& _internal_items(int index) const;
  ::com::sekirocc::face_service::SearchItemScore* _internal_add_items();
  public:
  const ::com::sekirocc::face_service::SearchItemScore& items(int index) const;
  ::com::sekirocc::face_service::SearchItemScore* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::face_service::SearchItemScore >&
      items() const;

  // .com.sekirocc.face_service.ResultCode code = 1;
  void clear_code();
  ::com::sekirocc::face_service::ResultCode code() const;
  void set_code(::com::sekirocc::face_service::ResultCode value);
  private:
  ::com::sekirocc::face_service::ResultCode _internal_code() const;
  void _internal_set_code(::com::sekirocc::face_service::ResultCode value);
  public:

  // @@protoc_insertion_point(class_scope:com.sekirocc.face_service.SearchFeatureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::face_service::SearchItemScore > items_;
    int code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feature_5fsearch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrainIndexRequest

// -------------------------------------------------------------------

// TrainIndexResponse

// .com.sekirocc.face_service.ResultCode code = 1;
inline void TrainIndexResponse::clear_code() {
  _impl_.code_ = 0;
}
inline ::com::sekirocc::face_service::ResultCode TrainIndexResponse::_internal_code() const {
  return static_cast< ::com::sekirocc::face_service::ResultCode >(_impl_.code_);
}
inline ::com::sekirocc::face_service::ResultCode TrainIndexResponse::code() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.face_service.TrainIndexResponse.code)
  return _internal_code();
}
inline void TrainIndexResponse::_internal_set_code(::com::sekirocc::face_service::ResultCode value) {
  
  _impl_.code_ = value;
}
inline void TrainIndexResponse::set_code(::com::sekirocc::face_service::ResultCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.face_service.TrainIndexResponse.code)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AddFeatureItem

// .com.sekirocc.face_service.FaceFeature feature = 1;
inline bool AddFeatureItem::_internal_has_feature() const {
  return this != internal_default_instance() && _impl_.feature_ != nullptr;
}
inline bool AddFeatureItem::has_feature() const {
  return _internal_has_feature();
}
inline const ::com::sekirocc::face_service::FaceFeature& AddFeatureItem::_internal_feature() const {
  const ::com::sekirocc::face_service::FaceFeature* p = _impl_.feature_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::sekirocc::face_service::FaceFeature&>(
      ::com::sekirocc::face_service::_FaceFeature_default_instance_);
}
inline const ::com::sekirocc::face_service::FaceFeature& AddFeatureItem::feature() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.face_service.AddFeatureItem.feature)
  return _internal_feature();
}
inline void AddFeatureItem::unsafe_arena_set_allocated_feature(
    ::com::sekirocc::face_service::FaceFeature* feature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.feature_);
  }
  _impl_.feature_ = feature;
  if (feature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.sekirocc.face_service.AddFeatureItem.feature)
}
inline ::com::sekirocc::face_service::FaceFeature* AddFeatureItem::release_feature() {
  
  ::com::sekirocc::face_service::FaceFeature* temp = _impl_.feature_;
  _impl_.feature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::sekirocc::face_service::FaceFeature* AddFeatureItem::unsafe_arena_release_feature() {
  // @@protoc_insertion_point(field_release:com.sekirocc.face_service.AddFeatureItem.feature)
  
  ::com::sekirocc::face_service::FaceFeature* temp = _impl_.feature_;
  _impl_.feature_ = nullptr;
  return temp;
}
inline ::com::sekirocc::face_service::FaceFeature* AddFeatureItem::_internal_mutable_feature() {
  
  if (_impl_.feature_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::sekirocc::face_service::FaceFeature>(GetArenaForAllocation());
    _impl_.feature_ = p;
  }
  return _impl_.feature_;
}
inline ::com::sekirocc::face_service::FaceFeature* AddFeatureItem::mutable_feature() {
  ::com::sekirocc::face_service::FaceFeature* _msg = _internal_mutable_feature();
  // @@protoc_insertion_point(field_mutable:com.sekirocc.face_service.AddFeatureItem.feature)
  return _msg;
}
inline void AddFeatureItem::set_allocated_feature(::com::sekirocc::face_service::FaceFeature* feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.feature_);
  }
  if (feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feature));
    if (message_arena != submessage_arena) {
      feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feature, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.feature_ = feature;
  // @@protoc_insertion_point(field_set_allocated:com.sekirocc.face_service.AddFeatureItem.feature)
}

// map<string, string> meta = 2;
inline int AddFeatureItem::_internal_meta_size() const {
  return _impl_.meta_.size();
}
inline int AddFeatureItem::meta_size() const {
  return _internal_meta_size();
}
inline void AddFeatureItem::clear_meta() {
  _impl_.meta_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AddFeatureItem::_internal_meta() const {
  return _impl_.meta_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AddFeatureItem::meta() const {
  // @@protoc_insertion_point(field_map:com.sekirocc.face_service.AddFeatureItem.meta)
  return _internal_meta();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AddFeatureItem::_internal_mutable_meta() {
  return _impl_.meta_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AddFeatureItem::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_map:com.sekirocc.face_service.AddFeatureItem.meta)
  return _internal_mutable_meta();
}

// -------------------------------------------------------------------

// AddFeatureRequest

// .com.sekirocc.face_service.AddFeatureItem feature_item = 1;
inline bool AddFeatureRequest::_internal_has_feature_item() const {
  return this != internal_default_instance() && _impl_.feature_item_ != nullptr;
}
inline bool AddFeatureRequest::has_feature_item() const {
  return _internal_has_feature_item();
}
inline void AddFeatureRequest::clear_feature_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.feature_item_ != nullptr) {
    delete _impl_.feature_item_;
  }
  _impl_.feature_item_ = nullptr;
}
inline const ::com::sekirocc::face_service::AddFeatureItem& AddFeatureRequest::_internal_feature_item() const {
  const ::com::sekirocc::face_service::AddFeatureItem* p = _impl_.feature_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::sekirocc::face_service::AddFeatureItem&>(
      ::com::sekirocc::face_service::_AddFeatureItem_default_instance_);
}
inline const ::com::sekirocc::face_service::AddFeatureItem& AddFeatureRequest::feature_item() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.face_service.AddFeatureRequest.feature_item)
  return _internal_feature_item();
}
inline void AddFeatureRequest::unsafe_arena_set_allocated_feature_item(
    ::com::sekirocc::face_service::AddFeatureItem* feature_item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.feature_item_);
  }
  _impl_.feature_item_ = feature_item;
  if (feature_item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.sekirocc.face_service.AddFeatureRequest.feature_item)
}
inline ::com::sekirocc::face_service::AddFeatureItem* AddFeatureRequest::release_feature_item() {
  
  ::com::sekirocc::face_service::AddFeatureItem* temp = _impl_.feature_item_;
  _impl_.feature_item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::sekirocc::face_service::AddFeatureItem* AddFeatureRequest::unsafe_arena_release_feature_item() {
  // @@protoc_insertion_point(field_release:com.sekirocc.face_service.AddFeatureRequest.feature_item)
  
  ::com::sekirocc::face_service::AddFeatureItem* temp = _impl_.feature_item_;
  _impl_.feature_item_ = nullptr;
  return temp;
}
inline ::com::sekirocc::face_service::AddFeatureItem* AddFeatureRequest::_internal_mutable_feature_item() {
  
  if (_impl_.feature_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::sekirocc::face_service::AddFeatureItem>(GetArenaForAllocation());
    _impl_.feature_item_ = p;
  }
  return _impl_.feature_item_;
}
inline ::com::sekirocc::face_service::AddFeatureItem* AddFeatureRequest::mutable_feature_item() {
  ::com::sekirocc::face_service::AddFeatureItem* _msg = _internal_mutable_feature_item();
  // @@protoc_insertion_point(field_mutable:com.sekirocc.face_service.AddFeatureRequest.feature_item)
  return _msg;
}
inline void AddFeatureRequest::set_allocated_feature_item(::com::sekirocc::face_service::AddFeatureItem* feature_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.feature_item_;
  }
  if (feature_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(feature_item);
    if (message_arena != submessage_arena) {
      feature_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feature_item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.feature_item_ = feature_item;
  // @@protoc_insertion_point(field_set_allocated:com.sekirocc.face_service.AddFeatureRequest.feature_item)
}

// -------------------------------------------------------------------

// AddFeatureResponse

// .com.sekirocc.face_service.ResultCode code = 1;
inline void AddFeatureResponse::clear_code() {
  _impl_.code_ = 0;
}
inline ::com::sekirocc::face_service::ResultCode AddFeatureResponse::_internal_code() const {
  return static_cast< ::com::sekirocc::face_service::ResultCode >(_impl_.code_);
}
inline ::com::sekirocc::face_service::ResultCode AddFeatureResponse::code() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.face_service.AddFeatureResponse.code)
  return _internal_code();
}
inline void AddFeatureResponse::_internal_set_code(::com::sekirocc::face_service::ResultCode value) {
  
  _impl_.code_ = value;
}
inline void AddFeatureResponse::set_code(::com::sekirocc::face_service::ResultCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.face_service.AddFeatureResponse.code)
}

// string feature_id = 2;
inline void AddFeatureResponse::clear_feature_id() {
  _impl_.feature_id_.ClearToEmpty();
}
inline const std::string& AddFeatureResponse::feature_id() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.face_service.AddFeatureResponse.feature_id)
  return _internal_feature_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddFeatureResponse::set_feature_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.feature_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.sekirocc.face_service.AddFeatureResponse.feature_id)
}
inline std::string* AddFeatureResponse::mutable_feature_id() {
  std::string* _s = _internal_mutable_feature_id();
  // @@protoc_insertion_point(field_mutable:com.sekirocc.face_service.AddFeatureResponse.feature_id)
  return _s;
}
inline const std::string& AddFeatureResponse::_internal_feature_id() const {
  return _impl_.feature_id_.Get();
}
inline void AddFeatureResponse::_internal_set_feature_id(const std::string& value) {
  
  _impl_.feature_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AddFeatureResponse::_internal_mutable_feature_id() {
  
  return _impl_.feature_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AddFeatureResponse::release_feature_id() {
  // @@protoc_insertion_point(field_release:com.sekirocc.face_service.AddFeatureResponse.feature_id)
  return _impl_.feature_id_.Release();
}
inline void AddFeatureResponse::set_allocated_feature_id(std::string* feature_id) {
  if (feature_id != nullptr) {
    
  } else {
    
  }
  _impl_.feature_id_.SetAllocated(feature_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.feature_id_.IsDefault()) {
    _impl_.feature_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.sekirocc.face_service.AddFeatureResponse.feature_id)
}

// -------------------------------------------------------------------

// DeleteFeatureRequest

// string feature_id = 1;
inline void DeleteFeatureRequest::clear_feature_id() {
  _impl_.feature_id_.ClearToEmpty();
}
inline const std::string& DeleteFeatureRequest::feature_id() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.face_service.DeleteFeatureRequest.feature_id)
  return _internal_feature_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteFeatureRequest::set_feature_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.feature_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.sekirocc.face_service.DeleteFeatureRequest.feature_id)
}
inline std::string* DeleteFeatureRequest::mutable_feature_id() {
  std::string* _s = _internal_mutable_feature_id();
  // @@protoc_insertion_point(field_mutable:com.sekirocc.face_service.DeleteFeatureRequest.feature_id)
  return _s;
}
inline const std::string& DeleteFeatureRequest::_internal_feature_id() const {
  return _impl_.feature_id_.Get();
}
inline void DeleteFeatureRequest::_internal_set_feature_id(const std::string& value) {
  
  _impl_.feature_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteFeatureRequest::_internal_mutable_feature_id() {
  
  return _impl_.feature_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteFeatureRequest::release_feature_id() {
  // @@protoc_insertion_point(field_release:com.sekirocc.face_service.DeleteFeatureRequest.feature_id)
  return _impl_.feature_id_.Release();
}
inline void DeleteFeatureRequest::set_allocated_feature_id(std::string* feature_id) {
  if (feature_id != nullptr) {
    
  } else {
    
  }
  _impl_.feature_id_.SetAllocated(feature_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.feature_id_.IsDefault()) {
    _impl_.feature_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.sekirocc.face_service.DeleteFeatureRequest.feature_id)
}

// -------------------------------------------------------------------

// DeleteFeatureResponse

// .com.sekirocc.face_service.ResultCode code = 1;
inline void DeleteFeatureResponse::clear_code() {
  _impl_.code_ = 0;
}
inline ::com::sekirocc::face_service::ResultCode DeleteFeatureResponse::_internal_code() const {
  return static_cast< ::com::sekirocc::face_service::ResultCode >(_impl_.code_);
}
inline ::com::sekirocc::face_service::ResultCode DeleteFeatureResponse::code() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.face_service.DeleteFeatureResponse.code)
  return _internal_code();
}
inline void DeleteFeatureResponse::_internal_set_code(::com::sekirocc::face_service::ResultCode value) {
  
  _impl_.code_ = value;
}
inline void DeleteFeatureResponse::set_code(::com::sekirocc::face_service::ResultCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.face_service.DeleteFeatureResponse.code)
}

// -------------------------------------------------------------------

// SearchFeatureRequest

// .com.sekirocc.face_service.FaceFeature query = 1;
inline bool SearchFeatureRequest::_internal_has_query() const {
  return this != internal_default_instance() && _impl_.query_ != nullptr;
}
inline bool SearchFeatureRequest::has_query() const {
  return _internal_has_query();
}
inline const ::com::sekirocc::face_service::FaceFeature& SearchFeatureRequest::_internal_query() const {
  const ::com::sekirocc::face_service::FaceFeature* p = _impl_.query_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::sekirocc::face_service::FaceFeature&>(
      ::com::sekirocc::face_service::_FaceFeature_default_instance_);
}
inline const ::com::sekirocc::face_service::FaceFeature& SearchFeatureRequest::query() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.face_service.SearchFeatureRequest.query)
  return _internal_query();
}
inline void SearchFeatureRequest::unsafe_arena_set_allocated_query(
    ::com::sekirocc::face_service::FaceFeature* query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_);
  }
  _impl_.query_ = query;
  if (query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.sekirocc.face_service.SearchFeatureRequest.query)
}
inline ::com::sekirocc::face_service::FaceFeature* SearchFeatureRequest::release_query() {
  
  ::com::sekirocc::face_service::FaceFeature* temp = _impl_.query_;
  _impl_.query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::sekirocc::face_service::FaceFeature* SearchFeatureRequest::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:com.sekirocc.face_service.SearchFeatureRequest.query)
  
  ::com::sekirocc::face_service::FaceFeature* temp = _impl_.query_;
  _impl_.query_ = nullptr;
  return temp;
}
inline ::com::sekirocc::face_service::FaceFeature* SearchFeatureRequest::_internal_mutable_query() {
  
  if (_impl_.query_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::sekirocc::face_service::FaceFeature>(GetArenaForAllocation());
    _impl_.query_ = p;
  }
  return _impl_.query_;
}
inline ::com::sekirocc::face_service::FaceFeature* SearchFeatureRequest::mutable_query() {
  ::com::sekirocc::face_service::FaceFeature* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:com.sekirocc.face_service.SearchFeatureRequest.query)
  return _msg;
}
inline void SearchFeatureRequest::set_allocated_query(::com::sekirocc::face_service::FaceFeature* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_);
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query));
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.query_ = query;
  // @@protoc_insertion_point(field_set_allocated:com.sekirocc.face_service.SearchFeatureRequest.query)
}

// int32 topk = 2;
inline void SearchFeatureRequest::clear_topk() {
  _impl_.topk_ = 0;
}
inline int32_t SearchFeatureRequest::_internal_topk() const {
  return _impl_.topk_;
}
inline int32_t SearchFeatureRequest::topk() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.face_service.SearchFeatureRequest.topk)
  return _internal_topk();
}
inline void SearchFeatureRequest::_internal_set_topk(int32_t value) {
  
  _impl_.topk_ = value;
}
inline void SearchFeatureRequest::set_topk(int32_t value) {
  _internal_set_topk(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.face_service.SearchFeatureRequest.topk)
}

// -------------------------------------------------------------------

// SearchItemScore

// .com.sekirocc.face_service.FaceFeature feature = 1;
inline bool SearchItemScore::_internal_has_feature() const {
  return this != internal_default_instance() && _impl_.feature_ != nullptr;
}
inline bool SearchItemScore::has_feature() const {
  return _internal_has_feature();
}
inline const ::com::sekirocc::face_service::FaceFeature& SearchItemScore::_internal_feature() const {
  const ::com::sekirocc::face_service::FaceFeature* p = _impl_.feature_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::sekirocc::face_service::FaceFeature&>(
      ::com::sekirocc::face_service::_FaceFeature_default_instance_);
}
inline const ::com::sekirocc::face_service::FaceFeature& SearchItemScore::feature() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.face_service.SearchItemScore.feature)
  return _internal_feature();
}
inline void SearchItemScore::unsafe_arena_set_allocated_feature(
    ::com::sekirocc::face_service::FaceFeature* feature) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.feature_);
  }
  _impl_.feature_ = feature;
  if (feature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.sekirocc.face_service.SearchItemScore.feature)
}
inline ::com::sekirocc::face_service::FaceFeature* SearchItemScore::release_feature() {
  
  ::com::sekirocc::face_service::FaceFeature* temp = _impl_.feature_;
  _impl_.feature_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::sekirocc::face_service::FaceFeature* SearchItemScore::unsafe_arena_release_feature() {
  // @@protoc_insertion_point(field_release:com.sekirocc.face_service.SearchItemScore.feature)
  
  ::com::sekirocc::face_service::FaceFeature* temp = _impl_.feature_;
  _impl_.feature_ = nullptr;
  return temp;
}
inline ::com::sekirocc::face_service::FaceFeature* SearchItemScore::_internal_mutable_feature() {
  
  if (_impl_.feature_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::sekirocc::face_service::FaceFeature>(GetArenaForAllocation());
    _impl_.feature_ = p;
  }
  return _impl_.feature_;
}
inline ::com::sekirocc::face_service::FaceFeature* SearchItemScore::mutable_feature() {
  ::com::sekirocc::face_service::FaceFeature* _msg = _internal_mutable_feature();
  // @@protoc_insertion_point(field_mutable:com.sekirocc.face_service.SearchItemScore.feature)
  return _msg;
}
inline void SearchItemScore::set_allocated_feature(::com::sekirocc::face_service::FaceFeature* feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.feature_);
  }
  if (feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feature));
    if (message_arena != submessage_arena) {
      feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feature, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.feature_ = feature;
  // @@protoc_insertion_point(field_set_allocated:com.sekirocc.face_service.SearchItemScore.feature)
}

// float score = 2;
inline void SearchItemScore::clear_score() {
  _impl_.score_ = 0;
}
inline float SearchItemScore::_internal_score() const {
  return _impl_.score_;
}
inline float SearchItemScore::score() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.face_service.SearchItemScore.score)
  return _internal_score();
}
inline void SearchItemScore::_internal_set_score(float value) {
  
  _impl_.score_ = value;
}
inline void SearchItemScore::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.face_service.SearchItemScore.score)
}

// -------------------------------------------------------------------

// SearchFeatureResponse

// .com.sekirocc.face_service.ResultCode code = 1;
inline void SearchFeatureResponse::clear_code() {
  _impl_.code_ = 0;
}
inline ::com::sekirocc::face_service::ResultCode SearchFeatureResponse::_internal_code() const {
  return static_cast< ::com::sekirocc::face_service::ResultCode >(_impl_.code_);
}
inline ::com::sekirocc::face_service::ResultCode SearchFeatureResponse::code() const {
  // @@protoc_insertion_point(field_get:com.sekirocc.face_service.SearchFeatureResponse.code)
  return _internal_code();
}
inline void SearchFeatureResponse::_internal_set_code(::com::sekirocc::face_service::ResultCode value) {
  
  _impl_.code_ = value;
}
inline void SearchFeatureResponse::set_code(::com::sekirocc::face_service::ResultCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:com.sekirocc.face_service.SearchFeatureResponse.code)
}

// repeated .com.sekirocc.face_service.SearchItemScore items = 2;
inline int SearchFeatureResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int SearchFeatureResponse::items_size() const {
  return _internal_items_size();
}
inline void SearchFeatureResponse::clear_items() {
  _impl_.items_.Clear();
}
inline ::com::sekirocc::face_service::SearchItemScore* SearchFeatureResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:com.sekirocc.face_service.SearchFeatureResponse.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::face_service::SearchItemScore >*
SearchFeatureResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:com.sekirocc.face_service.SearchFeatureResponse.items)
  return &_impl_.items_;
}
inline const ::com::sekirocc::face_service::SearchItemScore& SearchFeatureResponse::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::com::sekirocc::face_service::SearchItemScore& SearchFeatureResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:com.sekirocc.face_service.SearchFeatureResponse.items)
  return _internal_items(index);
}
inline ::com::sekirocc::face_service::SearchItemScore* SearchFeatureResponse::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::com::sekirocc::face_service::SearchItemScore* SearchFeatureResponse::add_items() {
  ::com::sekirocc::face_service::SearchItemScore* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:com.sekirocc.face_service.SearchFeatureResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::sekirocc::face_service::SearchItemScore >&
SearchFeatureResponse::items() const {
  // @@protoc_insertion_point(field_list:com.sekirocc.face_service.SearchFeatureResponse.items)
  return _impl_.items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace face_service
}  // namespace sekirocc
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_feature_5fsearch_2eproto
