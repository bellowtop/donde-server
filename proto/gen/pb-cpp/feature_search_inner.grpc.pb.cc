// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: feature_search_inner.proto

#include "feature_search_inner.pb.h"
#include "feature_search_inner.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace com {
namespace sekirocc {
namespace feature_search {
namespace inner {

static const char* FeatureSearch_method_names[] = {
  "/com.sekirocc.feature_search.inner.FeatureSearch/TrainIndex",
  "/com.sekirocc.feature_search.inner.FeatureSearch/AddFeature",
  "/com.sekirocc.feature_search.inner.FeatureSearch/DeleteFeature",
  "/com.sekirocc.feature_search.inner.FeatureSearch/SearchFeature",
};

std::unique_ptr< FeatureSearch::Stub> FeatureSearch::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FeatureSearch::Stub> stub(new FeatureSearch::Stub(channel, options));
  return stub;
}

FeatureSearch::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_TrainIndex_(FeatureSearch_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddFeature_(FeatureSearch_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteFeature_(FeatureSearch_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchFeature_(FeatureSearch_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FeatureSearch::Stub::TrainIndex(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest& request, ::com::sekirocc::feature_search::inner::TrainIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::sekirocc::feature_search::inner::TrainIndexRequest, ::com::sekirocc::feature_search::inner::TrainIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TrainIndex_, context, request, response);
}

void FeatureSearch::Stub::async::TrainIndex(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest* request, ::com::sekirocc::feature_search::inner::TrainIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::sekirocc::feature_search::inner::TrainIndexRequest, ::com::sekirocc::feature_search::inner::TrainIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TrainIndex_, context, request, response, std::move(f));
}

void FeatureSearch::Stub::async::TrainIndex(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest* request, ::com::sekirocc::feature_search::inner::TrainIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TrainIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::TrainIndexResponse>* FeatureSearch::Stub::PrepareAsyncTrainIndexRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::sekirocc::feature_search::inner::TrainIndexResponse, ::com::sekirocc::feature_search::inner::TrainIndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TrainIndex_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::TrainIndexResponse>* FeatureSearch::Stub::AsyncTrainIndexRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTrainIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FeatureSearch::Stub::AddFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::AddFeatureRequest& request, ::com::sekirocc::feature_search::inner::AddFeatureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::sekirocc::feature_search::inner::AddFeatureRequest, ::com::sekirocc::feature_search::inner::AddFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddFeature_, context, request, response);
}

void FeatureSearch::Stub::async::AddFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::AddFeatureRequest* request, ::com::sekirocc::feature_search::inner::AddFeatureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::sekirocc::feature_search::inner::AddFeatureRequest, ::com::sekirocc::feature_search::inner::AddFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddFeature_, context, request, response, std::move(f));
}

void FeatureSearch::Stub::async::AddFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::AddFeatureRequest* request, ::com::sekirocc::feature_search::inner::AddFeatureResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddFeature_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::AddFeatureResponse>* FeatureSearch::Stub::PrepareAsyncAddFeatureRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::AddFeatureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::sekirocc::feature_search::inner::AddFeatureResponse, ::com::sekirocc::feature_search::inner::AddFeatureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddFeature_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::AddFeatureResponse>* FeatureSearch::Stub::AsyncAddFeatureRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::AddFeatureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddFeatureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FeatureSearch::Stub::DeleteFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::DeleteFeatureRequest& request, ::com::sekirocc::feature_search::inner::DeleteFeatureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::sekirocc::feature_search::inner::DeleteFeatureRequest, ::com::sekirocc::feature_search::inner::DeleteFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteFeature_, context, request, response);
}

void FeatureSearch::Stub::async::DeleteFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::DeleteFeatureRequest* request, ::com::sekirocc::feature_search::inner::DeleteFeatureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::sekirocc::feature_search::inner::DeleteFeatureRequest, ::com::sekirocc::feature_search::inner::DeleteFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteFeature_, context, request, response, std::move(f));
}

void FeatureSearch::Stub::async::DeleteFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::DeleteFeatureRequest* request, ::com::sekirocc::feature_search::inner::DeleteFeatureResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteFeature_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::DeleteFeatureResponse>* FeatureSearch::Stub::PrepareAsyncDeleteFeatureRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::DeleteFeatureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::sekirocc::feature_search::inner::DeleteFeatureResponse, ::com::sekirocc::feature_search::inner::DeleteFeatureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteFeature_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::DeleteFeatureResponse>* FeatureSearch::Stub::AsyncDeleteFeatureRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::DeleteFeatureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteFeatureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FeatureSearch::Stub::SearchFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest& request, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::sekirocc::feature_search::inner::SearchFeatureRequest, ::com::sekirocc::feature_search::inner::SearchFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SearchFeature_, context, request, response);
}

void FeatureSearch::Stub::async::SearchFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* request, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::sekirocc::feature_search::inner::SearchFeatureRequest, ::com::sekirocc::feature_search::inner::SearchFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchFeature_, context, request, response, std::move(f));
}

void FeatureSearch::Stub::async::SearchFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* request, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchFeature_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::SearchFeatureResponse>* FeatureSearch::Stub::PrepareAsyncSearchFeatureRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::sekirocc::feature_search::inner::SearchFeatureResponse, ::com::sekirocc::feature_search::inner::SearchFeatureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SearchFeature_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::SearchFeatureResponse>* FeatureSearch::Stub::AsyncSearchFeatureRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchFeatureRaw(context, request, cq);
  result->StartCall();
  return result;
}

FeatureSearch::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FeatureSearch_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FeatureSearch::Service, ::com::sekirocc::feature_search::inner::TrainIndexRequest, ::com::sekirocc::feature_search::inner::TrainIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FeatureSearch::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::sekirocc::feature_search::inner::TrainIndexRequest* req,
             ::com::sekirocc::feature_search::inner::TrainIndexResponse* resp) {
               return service->TrainIndex(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FeatureSearch_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FeatureSearch::Service, ::com::sekirocc::feature_search::inner::AddFeatureRequest, ::com::sekirocc::feature_search::inner::AddFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FeatureSearch::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::sekirocc::feature_search::inner::AddFeatureRequest* req,
             ::com::sekirocc::feature_search::inner::AddFeatureResponse* resp) {
               return service->AddFeature(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FeatureSearch_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FeatureSearch::Service, ::com::sekirocc::feature_search::inner::DeleteFeatureRequest, ::com::sekirocc::feature_search::inner::DeleteFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FeatureSearch::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::sekirocc::feature_search::inner::DeleteFeatureRequest* req,
             ::com::sekirocc::feature_search::inner::DeleteFeatureResponse* resp) {
               return service->DeleteFeature(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FeatureSearch_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FeatureSearch::Service, ::com::sekirocc::feature_search::inner::SearchFeatureRequest, ::com::sekirocc::feature_search::inner::SearchFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FeatureSearch::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* req,
             ::com::sekirocc::feature_search::inner::SearchFeatureResponse* resp) {
               return service->SearchFeature(ctx, req, resp);
             }, this)));
}

FeatureSearch::Service::~Service() {
}

::grpc::Status FeatureSearch::Service::TrainIndex(::grpc::ServerContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest* request, ::com::sekirocc::feature_search::inner::TrainIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FeatureSearch::Service::AddFeature(::grpc::ServerContext* context, const ::com::sekirocc::feature_search::inner::AddFeatureRequest* request, ::com::sekirocc::feature_search::inner::AddFeatureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FeatureSearch::Service::DeleteFeature(::grpc::ServerContext* context, const ::com::sekirocc::feature_search::inner::DeleteFeatureRequest* request, ::com::sekirocc::feature_search::inner::DeleteFeatureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FeatureSearch::Service::SearchFeature(::grpc::ServerContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* request, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace com
}  // namespace sekirocc
}  // namespace feature_search
}  // namespace inner

