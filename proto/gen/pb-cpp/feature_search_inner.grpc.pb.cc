// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: feature_search_inner.proto

#include "feature_search_inner.pb.h"
#include "feature_search_inner.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace com {
namespace sekirocc {
namespace feature_search {
namespace inner {

static const char* FeatureSearchWorker_method_names[] = {
  "/com.sekirocc.feature_search.inner.FeatureSearchWorker/GetSystemInfo",
  "/com.sekirocc.feature_search.inner.FeatureSearchWorker/AssignDBShards",
  "/com.sekirocc.feature_search.inner.FeatureSearchWorker/TrainIndex",
  "/com.sekirocc.feature_search.inner.FeatureSearchWorker/BatchAddFeatures",
  "/com.sekirocc.feature_search.inner.FeatureSearchWorker/BatchDeleteFeatures",
  "/com.sekirocc.feature_search.inner.FeatureSearchWorker/SearchFeature",
};

std::unique_ptr< FeatureSearchWorker::Stub> FeatureSearchWorker::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FeatureSearchWorker::Stub> stub(new FeatureSearchWorker::Stub(channel, options));
  return stub;
}

FeatureSearchWorker::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetSystemInfo_(FeatureSearchWorker_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AssignDBShards_(FeatureSearchWorker_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TrainIndex_(FeatureSearchWorker_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchAddFeatures_(FeatureSearchWorker_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchDeleteFeatures_(FeatureSearchWorker_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchFeature_(FeatureSearchWorker_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FeatureSearchWorker::Stub::GetSystemInfo(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest& request, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::sekirocc::feature_search::inner::GetSystemInfoRequest, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSystemInfo_, context, request, response);
}

void FeatureSearchWorker::Stub::async::GetSystemInfo(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest* request, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::sekirocc::feature_search::inner::GetSystemInfoRequest, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSystemInfo_, context, request, response, std::move(f));
}

void FeatureSearchWorker::Stub::async::GetSystemInfo(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest* request, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSystemInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>* FeatureSearchWorker::Stub::PrepareAsyncGetSystemInfoRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::sekirocc::feature_search::inner::GetSystemInfoResponse, ::com::sekirocc::feature_search::inner::GetSystemInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSystemInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::GetSystemInfoResponse>* FeatureSearchWorker::Stub::AsyncGetSystemInfoRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSystemInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FeatureSearchWorker::Stub::AssignDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::AssignDBShardsRequest& request, ::com::sekirocc::feature_search::inner::AssignDBShardsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::sekirocc::feature_search::inner::AssignDBShardsRequest, ::com::sekirocc::feature_search::inner::AssignDBShardsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AssignDBShards_, context, request, response);
}

void FeatureSearchWorker::Stub::async::AssignDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::AssignDBShardsRequest* request, ::com::sekirocc::feature_search::inner::AssignDBShardsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::sekirocc::feature_search::inner::AssignDBShardsRequest, ::com::sekirocc::feature_search::inner::AssignDBShardsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssignDBShards_, context, request, response, std::move(f));
}

void FeatureSearchWorker::Stub::async::AssignDBShards(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::AssignDBShardsRequest* request, ::com::sekirocc::feature_search::inner::AssignDBShardsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssignDBShards_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::AssignDBShardsResponse>* FeatureSearchWorker::Stub::PrepareAsyncAssignDBShardsRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::AssignDBShardsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::sekirocc::feature_search::inner::AssignDBShardsResponse, ::com::sekirocc::feature_search::inner::AssignDBShardsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AssignDBShards_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::AssignDBShardsResponse>* FeatureSearchWorker::Stub::AsyncAssignDBShardsRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::AssignDBShardsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAssignDBShardsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FeatureSearchWorker::Stub::TrainIndex(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest& request, ::com::sekirocc::feature_search::inner::TrainIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::sekirocc::feature_search::inner::TrainIndexRequest, ::com::sekirocc::feature_search::inner::TrainIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TrainIndex_, context, request, response);
}

void FeatureSearchWorker::Stub::async::TrainIndex(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest* request, ::com::sekirocc::feature_search::inner::TrainIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::sekirocc::feature_search::inner::TrainIndexRequest, ::com::sekirocc::feature_search::inner::TrainIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TrainIndex_, context, request, response, std::move(f));
}

void FeatureSearchWorker::Stub::async::TrainIndex(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest* request, ::com::sekirocc::feature_search::inner::TrainIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TrainIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::TrainIndexResponse>* FeatureSearchWorker::Stub::PrepareAsyncTrainIndexRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::sekirocc::feature_search::inner::TrainIndexResponse, ::com::sekirocc::feature_search::inner::TrainIndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TrainIndex_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::TrainIndexResponse>* FeatureSearchWorker::Stub::AsyncTrainIndexRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTrainIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FeatureSearchWorker::Stub::BatchAddFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest& request, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchAddFeatures_, context, request, response);
}

void FeatureSearchWorker::Stub::async::BatchAddFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest* request, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchAddFeatures_, context, request, response, std::move(f));
}

void FeatureSearchWorker::Stub::async::BatchAddFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest* request, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchAddFeatures_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>* FeatureSearchWorker::Stub::PrepareAsyncBatchAddFeaturesRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse, ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchAddFeatures_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse>* FeatureSearchWorker::Stub::AsyncBatchAddFeaturesRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchAddFeaturesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FeatureSearchWorker::Stub::BatchDeleteFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest& request, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BatchDeleteFeatures_, context, request, response);
}

void FeatureSearchWorker::Stub::async::BatchDeleteFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest* request, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchDeleteFeatures_, context, request, response, std::move(f));
}

void FeatureSearchWorker::Stub::async::BatchDeleteFeatures(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest* request, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BatchDeleteFeatures_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>* FeatureSearchWorker::Stub::PrepareAsyncBatchDeleteFeaturesRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BatchDeleteFeatures_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse>* FeatureSearchWorker::Stub::AsyncBatchDeleteFeaturesRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBatchDeleteFeaturesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FeatureSearchWorker::Stub::SearchFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest& request, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::com::sekirocc::feature_search::inner::SearchFeatureRequest, ::com::sekirocc::feature_search::inner::SearchFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SearchFeature_, context, request, response);
}

void FeatureSearchWorker::Stub::async::SearchFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* request, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::com::sekirocc::feature_search::inner::SearchFeatureRequest, ::com::sekirocc::feature_search::inner::SearchFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchFeature_, context, request, response, std::move(f));
}

void FeatureSearchWorker::Stub::async::SearchFeature(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* request, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchFeature_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::SearchFeatureResponse>* FeatureSearchWorker::Stub::PrepareAsyncSearchFeatureRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::com::sekirocc::feature_search::inner::SearchFeatureResponse, ::com::sekirocc::feature_search::inner::SearchFeatureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SearchFeature_, context, request);
}

::grpc::ClientAsyncResponseReader< ::com::sekirocc::feature_search::inner::SearchFeatureResponse>* FeatureSearchWorker::Stub::AsyncSearchFeatureRaw(::grpc::ClientContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchFeatureRaw(context, request, cq);
  result->StartCall();
  return result;
}

FeatureSearchWorker::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FeatureSearchWorker_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FeatureSearchWorker::Service, ::com::sekirocc::feature_search::inner::GetSystemInfoRequest, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FeatureSearchWorker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest* req,
             ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* resp) {
               return service->GetSystemInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FeatureSearchWorker_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FeatureSearchWorker::Service, ::com::sekirocc::feature_search::inner::AssignDBShardsRequest, ::com::sekirocc::feature_search::inner::AssignDBShardsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FeatureSearchWorker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::sekirocc::feature_search::inner::AssignDBShardsRequest* req,
             ::com::sekirocc::feature_search::inner::AssignDBShardsResponse* resp) {
               return service->AssignDBShards(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FeatureSearchWorker_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FeatureSearchWorker::Service, ::com::sekirocc::feature_search::inner::TrainIndexRequest, ::com::sekirocc::feature_search::inner::TrainIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FeatureSearchWorker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::sekirocc::feature_search::inner::TrainIndexRequest* req,
             ::com::sekirocc::feature_search::inner::TrainIndexResponse* resp) {
               return service->TrainIndex(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FeatureSearchWorker_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FeatureSearchWorker::Service, ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FeatureSearchWorker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest* req,
             ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* resp) {
               return service->BatchAddFeatures(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FeatureSearchWorker_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FeatureSearchWorker::Service, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FeatureSearchWorker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest* req,
             ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* resp) {
               return service->BatchDeleteFeatures(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FeatureSearchWorker_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FeatureSearchWorker::Service, ::com::sekirocc::feature_search::inner::SearchFeatureRequest, ::com::sekirocc::feature_search::inner::SearchFeatureResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FeatureSearchWorker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* req,
             ::com::sekirocc::feature_search::inner::SearchFeatureResponse* resp) {
               return service->SearchFeature(ctx, req, resp);
             }, this)));
}

FeatureSearchWorker::Service::~Service() {
}

::grpc::Status FeatureSearchWorker::Service::GetSystemInfo(::grpc::ServerContext* context, const ::com::sekirocc::feature_search::inner::GetSystemInfoRequest* request, ::com::sekirocc::feature_search::inner::GetSystemInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FeatureSearchWorker::Service::AssignDBShards(::grpc::ServerContext* context, const ::com::sekirocc::feature_search::inner::AssignDBShardsRequest* request, ::com::sekirocc::feature_search::inner::AssignDBShardsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FeatureSearchWorker::Service::TrainIndex(::grpc::ServerContext* context, const ::com::sekirocc::feature_search::inner::TrainIndexRequest* request, ::com::sekirocc::feature_search::inner::TrainIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FeatureSearchWorker::Service::BatchAddFeatures(::grpc::ServerContext* context, const ::com::sekirocc::feature_search::inner::BatchAddFeaturesRequest* request, ::com::sekirocc::feature_search::inner::BatchAddFeaturesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FeatureSearchWorker::Service::BatchDeleteFeatures(::grpc::ServerContext* context, const ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesRequest* request, ::com::sekirocc::feature_search::inner::BatchDeleteFeaturesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FeatureSearchWorker::Service::SearchFeature(::grpc::ServerContext* context, const ::com::sekirocc::feature_search::inner::SearchFeatureRequest* request, ::com::sekirocc::feature_search::inner::SearchFeatureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace com
}  // namespace sekirocc
}  // namespace feature_search
}  // namespace inner

