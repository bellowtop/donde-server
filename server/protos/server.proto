syntax = "proto3";

import "google/api/annotations.proto";

option go_package = "github.com/sekirocc/face-recognition-service/face_service";
// option java_package = "com.sekirocc.face_recognition_service";

package com.sekirocc.face_service;

enum ResultCode {
    OK = 0;
    reserved 1 to 10000;

    SERVER_ERROR = 10001;
    reserved 10002 to 10100;

    CLIENT_ERROR = 10101;
    FACE_NOT_FOUND = 10102;
    reserved 10103 to 10200;
}

message Rect {
    Point point = 1;
    Size size = 2;
}

message Point {
    int32 x = 1;
    int32 y = 2;
}

message Size {
    int32 width = 1;
    int32 height = 2;
}

enum ImageFormat {
    IMAGE_UNKNOWN = 0;
    IMAGE_JPEG = 1;
    IMAGE_PNG = 2;
}

message Image {
    ImageFormat format = 1;
    bytes data = 2;
}

message FaceFeature {
    int32 version = 1;
    string model = 2;
    bytes blob = 3;
}

message FaceRectangle {
    Rect rectangle = 2;
    float quality = 3;
    float confidence = 4;
}


// Face Service
message DetectionRequest { Image image = 1; }

message DetectionResponse {
    ResultCode code = 1;
    repeated FaceRectangle face_rects = 2;
}

message ExtractionRequest { Image image = 1; }

message ExtractionResponse {
    ResultCode code = 1;
    repeated FaceRectangle face_rects = 2;
    repeated FaceFeature face_features = 3;
}

message CompareRequest {
    FaceFeature one = 1;
    FaceFeature two = 2;
}

message CompareResponse {
    ResultCode code = 1;
    float score = 2;
}

// Search Service
message TrainIndexRequest {
}

message TrainIndexResponse {
    ResultCode code = 1;
}

message AddFeatureRequest {
    FaceFeature feature = 1;
}

message AddFeatureResponse {
    ResultCode code = 1;
  int64 feature_id = 2;
}

message DeleteFeatureRequest {
  int64 feature_id = 1;
}

message DeleteFeatureResponse {
    ResultCode code = 1;
}

message SearchFeatureRequest {
    FaceFeature query = 1;
}

message SearchFeatureResponse {
    ResultCode code = 1;
}


// face service
service FaceService {

    rpc Detect(DetectionRequest) returns (DetectionResponse) {
        option (google.api.http) = {
            post : "/detect_face"
            body : "*"
        };
    }

    rpc ExtractFeature(ExtractionRequest) returns (ExtractionResponse) {
        option (google.api.http) = {
            post : "/extract_face_feature"
            body : "*"
        };
    }

    rpc CompareFeature(CompareRequest) returns (CompareResponse) {
        option (google.api.http) = {
            post : "/compare_face_feature"
            body : "*"
        };
    }
}

// feature search service
service FeatureSearch {

    rpc TrainIndex(TrainIndexRequest) returns (TrainIndexResponse) {
        option (google.api.http) = {
            post : "/train_index"
            body : "*"
        };
    }

    rpc AddFeature(AddFeatureRequest) returns (AddFeatureResponse) {
        option (google.api.http) = {
            post : "/add_feature"
            body : "*"
        };
    }

    rpc DeleteFeature(DeleteFeatureRequest) returns (DeleteFeatureResponse) {
        option (google.api.http) = {
            post : "/delete_feature"
            body : "*"
        };
    }

    rpc SearchFeature(SearchFeatureRequest) returns (SearchFeatureResponse) {
        option (google.api.http) = {
            post : "/search_feature"
            body : "*"
        };
    }

}
