// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: server.proto

package face_service

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResultCode int32

const (
	ResultCode_OK             ResultCode = 0
	ResultCode_SERVER_ERROR   ResultCode = 10001
	ResultCode_CLIENT_ERROR   ResultCode = 10101
	ResultCode_FACE_NOT_FOUND ResultCode = 10102
)

// Enum value maps for ResultCode.
var (
	ResultCode_name = map[int32]string{
		0:     "OK",
		10001: "SERVER_ERROR",
		10101: "CLIENT_ERROR",
		10102: "FACE_NOT_FOUND",
	}
	ResultCode_value = map[string]int32{
		"OK":             0,
		"SERVER_ERROR":   10001,
		"CLIENT_ERROR":   10101,
		"FACE_NOT_FOUND": 10102,
	}
)

func (x ResultCode) Enum() *ResultCode {
	p := new(ResultCode)
	*p = x
	return p
}

func (x ResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[0].Descriptor()
}

func (ResultCode) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[0]
}

func (x ResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultCode.Descriptor instead.
func (ResultCode) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0}
}

type ImageFormat int32

const (
	ImageFormat_IMAGE_UNKNOWN ImageFormat = 0
	ImageFormat_IMAGE_JPEG    ImageFormat = 1
	ImageFormat_IMAGE_PNG     ImageFormat = 2
)

// Enum value maps for ImageFormat.
var (
	ImageFormat_name = map[int32]string{
		0: "IMAGE_UNKNOWN",
		1: "IMAGE_JPEG",
		2: "IMAGE_PNG",
	}
	ImageFormat_value = map[string]int32{
		"IMAGE_UNKNOWN": 0,
		"IMAGE_JPEG":    1,
		"IMAGE_PNG":     2,
	}
)

func (x ImageFormat) Enum() *ImageFormat {
	p := new(ImageFormat)
	*p = x
	return p
}

func (x ImageFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[1].Descriptor()
}

func (ImageFormat) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[1]
}

func (x ImageFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageFormat.Descriptor instead.
func (ImageFormat) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{1}
}

type Rect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Point *Point `protobuf:"bytes,1,opt,name=point,proto3" json:"point,omitempty"`
	Size  *Size  `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Rect) Reset() {
	*x = Rect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rect) ProtoMessage() {}

func (x *Rect) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rect.ProtoReflect.Descriptor instead.
func (*Rect) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0}
}

func (x *Rect) GetPoint() *Point {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *Rect) GetSize() *Size {
	if x != nil {
		return x.Size
	}
	return nil
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{1}
}

func (x *Point) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Point) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type Size struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *Size) Reset() {
	*x = Size{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Size) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Size) ProtoMessage() {}

func (x *Size) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Size.ProtoReflect.Descriptor instead.
func (*Size) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{2}
}

func (x *Size) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Size) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format ImageFormat `protobuf:"varint,1,opt,name=format,proto3,enum=com.sekirocc.face_service.ImageFormat" json:"format,omitempty"`
	Data   []byte      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3}
}

func (x *Image) GetFormat() ImageFormat {
	if x != nil {
		return x.Format
	}
	return ImageFormat_IMAGE_UNKNOWN
}

func (x *Image) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type FaceFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Model   string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	Blob    []byte `protobuf:"bytes,3,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *FaceFeature) Reset() {
	*x = FaceFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaceFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaceFeature) ProtoMessage() {}

func (x *FaceFeature) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaceFeature.ProtoReflect.Descriptor instead.
func (*FaceFeature) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{4}
}

func (x *FaceFeature) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FaceFeature) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *FaceFeature) GetBlob() []byte {
	if x != nil {
		return x.Blob
	}
	return nil
}

type FaceRectangle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rectangle  *Rect   `protobuf:"bytes,2,opt,name=rectangle,proto3" json:"rectangle,omitempty"`
	Quality    float32 `protobuf:"fixed32,3,opt,name=quality,proto3" json:"quality,omitempty"`
	Confidence float32 `protobuf:"fixed32,4,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *FaceRectangle) Reset() {
	*x = FaceRectangle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaceRectangle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaceRectangle) ProtoMessage() {}

func (x *FaceRectangle) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaceRectangle.ProtoReflect.Descriptor instead.
func (*FaceRectangle) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{5}
}

func (x *FaceRectangle) GetRectangle() *Rect {
	if x != nil {
		return x.Rectangle
	}
	return nil
}

func (x *FaceRectangle) GetQuality() float32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *FaceRectangle) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

type DetectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image *Image `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *DetectionRequest) Reset() {
	*x = DetectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectionRequest) ProtoMessage() {}

func (x *DetectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectionRequest.ProtoReflect.Descriptor instead.
func (*DetectionRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{6}
}

func (x *DetectionRequest) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

type DetectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      ResultCode       `protobuf:"varint,1,opt,name=code,proto3,enum=com.sekirocc.face_service.ResultCode" json:"code,omitempty"`
	FaceRects []*FaceRectangle `protobuf:"bytes,2,rep,name=face_rects,json=faceRects,proto3" json:"face_rects,omitempty"`
}

func (x *DetectionResponse) Reset() {
	*x = DetectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectionResponse) ProtoMessage() {}

func (x *DetectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectionResponse.ProtoReflect.Descriptor instead.
func (*DetectionResponse) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{7}
}

func (x *DetectionResponse) GetCode() ResultCode {
	if x != nil {
		return x.Code
	}
	return ResultCode_OK
}

func (x *DetectionResponse) GetFaceRects() []*FaceRectangle {
	if x != nil {
		return x.FaceRects
	}
	return nil
}

type ExtractionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image *Image `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *ExtractionRequest) Reset() {
	*x = ExtractionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractionRequest) ProtoMessage() {}

func (x *ExtractionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractionRequest.ProtoReflect.Descriptor instead.
func (*ExtractionRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{8}
}

func (x *ExtractionRequest) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

type ExtractionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         ResultCode       `protobuf:"varint,1,opt,name=code,proto3,enum=com.sekirocc.face_service.ResultCode" json:"code,omitempty"`
	FaceRects    []*FaceRectangle `protobuf:"bytes,2,rep,name=face_rects,json=faceRects,proto3" json:"face_rects,omitempty"`
	FaceFeatures []*FaceFeature   `protobuf:"bytes,3,rep,name=face_features,json=faceFeatures,proto3" json:"face_features,omitempty"`
}

func (x *ExtractionResponse) Reset() {
	*x = ExtractionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractionResponse) ProtoMessage() {}

func (x *ExtractionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractionResponse.ProtoReflect.Descriptor instead.
func (*ExtractionResponse) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{9}
}

func (x *ExtractionResponse) GetCode() ResultCode {
	if x != nil {
		return x.Code
	}
	return ResultCode_OK
}

func (x *ExtractionResponse) GetFaceRects() []*FaceRectangle {
	if x != nil {
		return x.FaceRects
	}
	return nil
}

func (x *ExtractionResponse) GetFaceFeatures() []*FaceFeature {
	if x != nil {
		return x.FaceFeatures
	}
	return nil
}

type CompareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	One *FaceFeature `protobuf:"bytes,1,opt,name=one,proto3" json:"one,omitempty"`
	Two *FaceFeature `protobuf:"bytes,2,opt,name=two,proto3" json:"two,omitempty"`
}

func (x *CompareRequest) Reset() {
	*x = CompareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareRequest) ProtoMessage() {}

func (x *CompareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareRequest.ProtoReflect.Descriptor instead.
func (*CompareRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{10}
}

func (x *CompareRequest) GetOne() *FaceFeature {
	if x != nil {
		return x.One
	}
	return nil
}

func (x *CompareRequest) GetTwo() *FaceFeature {
	if x != nil {
		return x.Two
	}
	return nil
}

type CompareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  ResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=com.sekirocc.face_service.ResultCode" json:"code,omitempty"`
	Score float32    `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *CompareResponse) Reset() {
	*x = CompareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareResponse) ProtoMessage() {}

func (x *CompareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareResponse.ProtoReflect.Descriptor instead.
func (*CompareResponse) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{11}
}

func (x *CompareResponse) GetCode() ResultCode {
	if x != nil {
		return x.Code
	}
	return ResultCode_OK
}

func (x *CompareResponse) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

var File_server_proto protoreflect.FileDescriptor

var file_server_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x6b, 0x69, 0x72, 0x6f, 0x63, 0x63, 0x2e, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73, 0x0a, 0x04, 0x52, 0x65, 0x63, 0x74, 0x12,
	0x36, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x6b, 0x69, 0x72, 0x6f, 0x63, 0x63, 0x2e, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x6b, 0x69,
	0x72, 0x6f, 0x63, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x23, 0x0a, 0x05,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x79, 0x22, 0x34, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x5b, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x3e, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x6b, 0x69, 0x72, 0x6f, 0x63, 0x63, 0x2e,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a, 0x0b, 0x46, 0x61, 0x63, 0x65, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x22, 0x88, 0x01, 0x0a, 0x0d, 0x46, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x6b, 0x69, 0x72, 0x6f, 0x63, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0x4a, 0x0a, 0x10, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x6b, 0x69,
	0x72, 0x6f, 0x63, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x97,
	0x01, 0x0a, 0x11, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x6b, 0x69, 0x72, 0x6f, 0x63,
	0x63, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x47, 0x0a, 0x0a, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x6b, 0x69, 0x72, 0x6f,
	0x63, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x46, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x09, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x74, 0x73, 0x22, 0x4b, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x6b, 0x69, 0x72, 0x6f, 0x63, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x65, 0x6b, 0x69, 0x72, 0x6f, 0x63, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x65, 0x6b, 0x69, 0x72, 0x6f, 0x63, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x74,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x09, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x4b, 0x0a, 0x0d, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65,
	0x6b, 0x69, 0x72, 0x6f, 0x63, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x0c, 0x66, 0x61, 0x63, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x84, 0x01,
	0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x03, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x6b, 0x69, 0x72, 0x6f, 0x63, 0x63, 0x2e, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x03, 0x6f, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x74, 0x77,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65,
	0x6b, 0x69, 0x72, 0x6f, 0x63, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x03, 0x74, 0x77, 0x6f, 0x22, 0x62, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x6b, 0x69,
	0x72, 0x6f, 0x63, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2a, 0x66, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x91,
	0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0xf5, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xf6, 0x4e, 0x22, 0x05, 0x08, 0x01, 0x10, 0x90, 0x4e,
	0x22, 0x06, 0x08, 0x92, 0x4e, 0x10, 0xf4, 0x4e, 0x22, 0x06, 0x08, 0xf7, 0x4e, 0x10, 0xd8, 0x4f,
	0x2a, 0x3f, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4a, 0x50, 0x45, 0x47,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x4e, 0x47, 0x10,
	0x02, 0x32, 0xa9, 0x03, 0x0a, 0x0b, 0x46, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x7c, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x65, 0x6b, 0x69, 0x72, 0x6f, 0x63, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x65, 0x6b, 0x69, 0x72, 0x6f, 0x63, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c,
	0x2f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0x8f, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x6b, 0x69, 0x72, 0x6f, 0x63,
	0x63, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x6b, 0x69, 0x72, 0x6f, 0x63, 0x63, 0x2e,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0x89, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x6b, 0x69, 0x72,
	0x6f, 0x63, 0x63, 0x2e, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x6b, 0x69, 0x72, 0x6f, 0x63, 0x63, 0x2e, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x01, 0x2a, 0x42, 0x3b, 0x5a,
	0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x6b, 0x69,
	0x72, 0x6f, 0x63, 0x63, 0x2f, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_server_proto_rawDescOnce sync.Once
	file_server_proto_rawDescData = file_server_proto_rawDesc
)

func file_server_proto_rawDescGZIP() []byte {
	file_server_proto_rawDescOnce.Do(func() {
		file_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_proto_rawDescData)
	})
	return file_server_proto_rawDescData
}

var file_server_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_server_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_server_proto_goTypes = []interface{}{
	(ResultCode)(0),            // 0: com.sekirocc.face_service.ResultCode
	(ImageFormat)(0),           // 1: com.sekirocc.face_service.ImageFormat
	(*Rect)(nil),               // 2: com.sekirocc.face_service.Rect
	(*Point)(nil),              // 3: com.sekirocc.face_service.Point
	(*Size)(nil),               // 4: com.sekirocc.face_service.Size
	(*Image)(nil),              // 5: com.sekirocc.face_service.Image
	(*FaceFeature)(nil),        // 6: com.sekirocc.face_service.FaceFeature
	(*FaceRectangle)(nil),      // 7: com.sekirocc.face_service.FaceRectangle
	(*DetectionRequest)(nil),   // 8: com.sekirocc.face_service.DetectionRequest
	(*DetectionResponse)(nil),  // 9: com.sekirocc.face_service.DetectionResponse
	(*ExtractionRequest)(nil),  // 10: com.sekirocc.face_service.ExtractionRequest
	(*ExtractionResponse)(nil), // 11: com.sekirocc.face_service.ExtractionResponse
	(*CompareRequest)(nil),     // 12: com.sekirocc.face_service.CompareRequest
	(*CompareResponse)(nil),    // 13: com.sekirocc.face_service.CompareResponse
}
var file_server_proto_depIdxs = []int32{
	3,  // 0: com.sekirocc.face_service.Rect.point:type_name -> com.sekirocc.face_service.Point
	4,  // 1: com.sekirocc.face_service.Rect.size:type_name -> com.sekirocc.face_service.Size
	1,  // 2: com.sekirocc.face_service.Image.format:type_name -> com.sekirocc.face_service.ImageFormat
	2,  // 3: com.sekirocc.face_service.FaceRectangle.rectangle:type_name -> com.sekirocc.face_service.Rect
	5,  // 4: com.sekirocc.face_service.DetectionRequest.image:type_name -> com.sekirocc.face_service.Image
	0,  // 5: com.sekirocc.face_service.DetectionResponse.code:type_name -> com.sekirocc.face_service.ResultCode
	7,  // 6: com.sekirocc.face_service.DetectionResponse.face_rects:type_name -> com.sekirocc.face_service.FaceRectangle
	5,  // 7: com.sekirocc.face_service.ExtractionRequest.image:type_name -> com.sekirocc.face_service.Image
	0,  // 8: com.sekirocc.face_service.ExtractionResponse.code:type_name -> com.sekirocc.face_service.ResultCode
	7,  // 9: com.sekirocc.face_service.ExtractionResponse.face_rects:type_name -> com.sekirocc.face_service.FaceRectangle
	6,  // 10: com.sekirocc.face_service.ExtractionResponse.face_features:type_name -> com.sekirocc.face_service.FaceFeature
	6,  // 11: com.sekirocc.face_service.CompareRequest.one:type_name -> com.sekirocc.face_service.FaceFeature
	6,  // 12: com.sekirocc.face_service.CompareRequest.two:type_name -> com.sekirocc.face_service.FaceFeature
	0,  // 13: com.sekirocc.face_service.CompareResponse.code:type_name -> com.sekirocc.face_service.ResultCode
	8,  // 14: com.sekirocc.face_service.FaceService.Detect:input_type -> com.sekirocc.face_service.DetectionRequest
	10, // 15: com.sekirocc.face_service.FaceService.ExtractFeature:input_type -> com.sekirocc.face_service.ExtractionRequest
	12, // 16: com.sekirocc.face_service.FaceService.CompareFeature:input_type -> com.sekirocc.face_service.CompareRequest
	9,  // 17: com.sekirocc.face_service.FaceService.Detect:output_type -> com.sekirocc.face_service.DetectionResponse
	11, // 18: com.sekirocc.face_service.FaceService.ExtractFeature:output_type -> com.sekirocc.face_service.ExtractionResponse
	13, // 19: com.sekirocc.face_service.FaceService.CompareFeature:output_type -> com.sekirocc.face_service.CompareResponse
	17, // [17:20] is the sub-list for method output_type
	14, // [14:17] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_server_proto_init() }
func file_server_proto_init() {
	if File_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Size); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaceFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaceRectangle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_proto_goTypes,
		DependencyIndexes: file_server_proto_depIdxs,
		EnumInfos:         file_server_proto_enumTypes,
		MessageInfos:      file_server_proto_msgTypes,
	}.Build()
	File_server_proto = out.File
	file_server_proto_rawDesc = nil
	file_server_proto_goTypes = nil
	file_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FaceServiceClient is the client API for FaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FaceServiceClient interface {
	Detect(ctx context.Context, in *DetectionRequest, opts ...grpc.CallOption) (*DetectionResponse, error)
	ExtractFeature(ctx context.Context, in *ExtractionRequest, opts ...grpc.CallOption) (*ExtractionResponse, error)
	CompareFeature(ctx context.Context, in *CompareRequest, opts ...grpc.CallOption) (*CompareResponse, error)
}

type faceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFaceServiceClient(cc grpc.ClientConnInterface) FaceServiceClient {
	return &faceServiceClient{cc}
}

func (c *faceServiceClient) Detect(ctx context.Context, in *DetectionRequest, opts ...grpc.CallOption) (*DetectionResponse, error) {
	out := new(DetectionResponse)
	err := c.cc.Invoke(ctx, "/com.sekirocc.face_service.FaceService/Detect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceServiceClient) ExtractFeature(ctx context.Context, in *ExtractionRequest, opts ...grpc.CallOption) (*ExtractionResponse, error) {
	out := new(ExtractionResponse)
	err := c.cc.Invoke(ctx, "/com.sekirocc.face_service.FaceService/ExtractFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceServiceClient) CompareFeature(ctx context.Context, in *CompareRequest, opts ...grpc.CallOption) (*CompareResponse, error) {
	out := new(CompareResponse)
	err := c.cc.Invoke(ctx, "/com.sekirocc.face_service.FaceService/CompareFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaceServiceServer is the server API for FaceService service.
type FaceServiceServer interface {
	Detect(context.Context, *DetectionRequest) (*DetectionResponse, error)
	ExtractFeature(context.Context, *ExtractionRequest) (*ExtractionResponse, error)
	CompareFeature(context.Context, *CompareRequest) (*CompareResponse, error)
}

// UnimplementedFaceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFaceServiceServer struct {
}

func (*UnimplementedFaceServiceServer) Detect(context.Context, *DetectionRequest) (*DetectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detect not implemented")
}
func (*UnimplementedFaceServiceServer) ExtractFeature(context.Context, *ExtractionRequest) (*ExtractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractFeature not implemented")
}
func (*UnimplementedFaceServiceServer) CompareFeature(context.Context, *CompareRequest) (*CompareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareFeature not implemented")
}

func RegisterFaceServiceServer(s *grpc.Server, srv FaceServiceServer) {
	s.RegisterService(&_FaceService_serviceDesc, srv)
}

func _FaceService_Detect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceServiceServer).Detect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.sekirocc.face_service.FaceService/Detect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceServiceServer).Detect(ctx, req.(*DetectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceService_ExtractFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceServiceServer).ExtractFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.sekirocc.face_service.FaceService/ExtractFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceServiceServer).ExtractFeature(ctx, req.(*ExtractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceService_CompareFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceServiceServer).CompareFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.sekirocc.face_service.FaceService/CompareFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceServiceServer).CompareFeature(ctx, req.(*CompareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FaceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.sekirocc.face_service.FaceService",
	HandlerType: (*FaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Detect",
			Handler:    _FaceService_Detect_Handler,
		},
		{
			MethodName: "ExtractFeature",
			Handler:    _FaceService_ExtractFeature_Handler,
		},
		{
			MethodName: "CompareFeature",
			Handler:    _FaceService_CompareFeature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
