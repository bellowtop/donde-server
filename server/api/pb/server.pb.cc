// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb/server.proto

#include "pb/server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace com {
namespace sekirocc {
namespace face_service {
constexpr Vertex::Vertex(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct VertexDefaultTypeInternal {
  constexpr VertexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VertexDefaultTypeInternal() {}
  union {
    Vertex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VertexDefaultTypeInternal _Vertex_default_instance_;
constexpr Size::Size(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : width_(0)
  , height_(0){}
struct SizeDefaultTypeInternal {
  constexpr SizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SizeDefaultTypeInternal() {}
  union {
    Size _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SizeDefaultTypeInternal _Size_default_instance_;
constexpr BoundingPoly::BoundingPoly(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vertices_(){}
struct BoundingPolyDefaultTypeInternal {
  constexpr BoundingPolyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoundingPolyDefaultTypeInternal() {}
  union {
    BoundingPoly _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoundingPolyDefaultTypeInternal _BoundingPoly_default_instance_;
constexpr Image::Image(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , format_(0)
{}
struct ImageDefaultTypeInternal {
  constexpr ImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageDefaultTypeInternal() {}
  union {
    Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageDefaultTypeInternal _Image_default_instance_;
constexpr FaceDetectRequest::FaceDetectRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_(nullptr){}
struct FaceDetectRequestDefaultTypeInternal {
  constexpr FaceDetectRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FaceDetectRequestDefaultTypeInternal() {}
  union {
    FaceDetectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FaceDetectRequestDefaultTypeInternal _FaceDetectRequest_default_instance_;
constexpr BatchDetectRequest::BatchDetectRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requests_(){}
struct BatchDetectRequestDefaultTypeInternal {
  constexpr BatchDetectRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchDetectRequestDefaultTypeInternal() {}
  union {
    BatchDetectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchDetectRequestDefaultTypeInternal _BatchDetectRequest_default_instance_;
constexpr Result::Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(0)
  , status_(0)
{}
struct ResultDefaultTypeInternal {
  constexpr ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResultDefaultTypeInternal _Result_default_instance_;
constexpr FaceFeature::FaceFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blob_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0){}
struct FaceFeatureDefaultTypeInternal {
  constexpr FaceFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FaceFeatureDefaultTypeInternal() {}
  union {
    FaceFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FaceFeatureDefaultTypeInternal _FaceFeature_default_instance_;
constexpr FaceObject::FaceObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : landmarks_()
  , rectangle_(nullptr)
  , feature_(nullptr)
  , quality_(0)
  , face_score_(0){}
struct FaceObjectDefaultTypeInternal {
  constexpr FaceObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FaceObjectDefaultTypeInternal() {}
  union {
    FaceObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FaceObjectDefaultTypeInternal _FaceObject_default_instance_;
constexpr ObjectInfo::ObjectInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : face_(nullptr){}
struct ObjectInfoDefaultTypeInternal {
  constexpr ObjectInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectInfoDefaultTypeInternal() {}
  union {
    ObjectInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
constexpr FaceDetectResponse::FaceDetectResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : face_info_(){}
struct FaceDetectResponseDefaultTypeInternal {
  constexpr FaceDetectResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FaceDetectResponseDefaultTypeInternal() {}
  union {
    FaceDetectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FaceDetectResponseDefaultTypeInternal _FaceDetectResponse_default_instance_;
constexpr BatchDetectResponse::BatchDetectResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , responses_(){}
struct BatchDetectResponseDefaultTypeInternal {
  constexpr BatchDetectResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchDetectResponseDefaultTypeInternal() {}
  union {
    BatchDetectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchDetectResponseDefaultTypeInternal _BatchDetectResponse_default_instance_;
}  // namespace face_service
}  // namespace sekirocc
}  // namespace com
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pb_2fserver_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pb_2fserver_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pb_2fserver_2eproto = nullptr;

const uint32_t TableStruct_pb_2fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Vertex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Vertex, x_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Vertex, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Size, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Size, width_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Size, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::BoundingPoly, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::BoundingPoly, vertices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Image, format_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Image, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceDetectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceDetectRequest, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::BatchDetectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::BatchDetectRequest, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Result, code_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Result, error_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::Result, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceFeature, blob_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceFeature, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceObject, quality_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceObject, rectangle_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceObject, landmarks_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceObject, face_score_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceObject, feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::ObjectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::ObjectInfo, face_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceDetectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::FaceDetectResponse, face_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::BatchDetectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::BatchDetectResponse, results_),
  PROTOBUF_FIELD_OFFSET(::com::sekirocc::face_service::BatchDetectResponse, responses_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::com::sekirocc::face_service::Vertex)},
  { 8, -1, -1, sizeof(::com::sekirocc::face_service::Size)},
  { 16, -1, -1, sizeof(::com::sekirocc::face_service::BoundingPoly)},
  { 23, -1, -1, sizeof(::com::sekirocc::face_service::Image)},
  { 31, -1, -1, sizeof(::com::sekirocc::face_service::FaceDetectRequest)},
  { 38, -1, -1, sizeof(::com::sekirocc::face_service::BatchDetectRequest)},
  { 45, -1, -1, sizeof(::com::sekirocc::face_service::Result)},
  { 54, -1, -1, sizeof(::com::sekirocc::face_service::FaceFeature)},
  { 62, -1, -1, sizeof(::com::sekirocc::face_service::FaceObject)},
  { 73, -1, -1, sizeof(::com::sekirocc::face_service::ObjectInfo)},
  { 80, -1, -1, sizeof(::com::sekirocc::face_service::FaceDetectResponse)},
  { 87, -1, -1, sizeof(::com::sekirocc::face_service::BatchDetectResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::sekirocc::face_service::_Vertex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::sekirocc::face_service::_Size_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::sekirocc::face_service::_BoundingPoly_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::sekirocc::face_service::_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::sekirocc::face_service::_FaceDetectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::sekirocc::face_service::_BatchDetectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::sekirocc::face_service::_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::sekirocc::face_service::_FaceFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::sekirocc::face_service::_FaceObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::sekirocc::face_service::_ObjectInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::sekirocc::face_service::_FaceDetectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::sekirocc::face_service::_BatchDetectResponse_default_instance_),
};

const char descriptor_table_protodef_pb_2fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017pb/server.proto\022\031com.sekirocc.face_ser"
  "vice\"\036\n\006Vertex\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"%\n\004"
  "Size\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\"C\n\014B"
  "oundingPoly\0223\n\010vertices\030\001 \003(\0132!.com.seki"
  "rocc.face_service.Vertex\"M\n\005Image\0226\n\006for"
  "mat\030\001 \001(\0162&.com.sekirocc.face_service.Im"
  "ageFormat\022\014\n\004data\030\002 \001(\014\"D\n\021FaceDetectReq"
  "uest\022/\n\005image\030\001 \001(\0132 .com.sekirocc.face_"
  "service.Image\"T\n\022BatchDetectRequest\022>\n\010r"
  "equests\030\001 \003(\0132,.com.sekirocc.face_servic"
  "e.FaceDetectRequest\"\\\n\006Result\022\014\n\004code\030\001 "
  "\001(\005\022\r\n\005error\030\002 \001(\t\0225\n\006status\030\003 \001(\0162%.com"
  ".sekirocc.face_service.StatusCode\",\n\013Fac"
  "eFeature\022\014\n\004blob\030\001 \001(\014\022\017\n\007version\030\002 \001(\005\""
  "\334\001\n\nFaceObject\022\017\n\007quality\030\001 \001(\002\022:\n\trecta"
  "ngle\030\002 \001(\0132\'.com.sekirocc.face_service.B"
  "oundingPoly\0224\n\tlandmarks\030\003 \003(\0132!.com.sek"
  "irocc.face_service.Vertex\022\022\n\nface_score\030"
  "\004 \001(\002\0227\n\007feature\030\005 \001(\0132&.com.sekirocc.fa"
  "ce_service.FaceFeature\"A\n\nObjectInfo\0223\n\004"
  "face\030\001 \001(\0132%.com.sekirocc.face_service.F"
  "aceObject\"N\n\022FaceDetectResponse\0228\n\tface_"
  "info\030\001 \003(\0132%.com.sekirocc.face_service.O"
  "bjectInfo\"\213\001\n\023BatchDetectResponse\0222\n\007res"
  "ults\030\001 \003(\0132!.com.sekirocc.face_service.R"
  "esult\022@\n\tresponses\030\002 \003(\0132-.com.sekirocc."
  "face_service.FaceDetectResponse*m\n\013Image"
  "Format\022\021\n\rIMAGE_UNKNOWN\020\000\022\016\n\nIMAGE_JPEG\020"
  "\001\022\r\n\tIMAGE_PNG\020\002\022\r\n\tIMAGE_BMP\020\003\022\016\n\nIMAGE"
  "_TIFF\020\004\022\r\n\tIMAGE_GIF\020\005*f\n\nStatusCode\022\006\n\002"
  "OK\020\000\022\021\n\014SERVER_ERROR\020\221N\022\021\n\014CLIENT_ERROR\020"
  "\365N\022\023\n\016FACE_NOT_FOUND\020\366N\"\005\010\001\020\220N\"\006\010\222N\020\364N\"\006"
  "\010\367N\020\330O2}\n\013FaceService\022n\n\013BatchDetect\022-.c"
  "om.sekirocc.face_service.BatchDetectRequ"
  "est\032..com.sekirocc.face_service.BatchDet"
  "ectResponse\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pb_2fserver_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2fserver_2eproto = {
  false, false, 1421, descriptor_table_protodef_pb_2fserver_2eproto, "pb/server.proto", 
  &descriptor_table_pb_2fserver_2eproto_once, nullptr, 0, 12,
  schemas, file_default_instances, TableStruct_pb_2fserver_2eproto::offsets,
  file_level_metadata_pb_2fserver_2eproto, file_level_enum_descriptors_pb_2fserver_2eproto, file_level_service_descriptors_pb_2fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_pb_2fserver_2eproto_getter() {
  return &descriptor_table_pb_2fserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_pb_2fserver_2eproto(&descriptor_table_pb_2fserver_2eproto);
namespace com {
namespace sekirocc {
namespace face_service {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pb_2fserver_2eproto);
  return file_level_enum_descriptors_pb_2fserver_2eproto[0];
}
bool ImageFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pb_2fserver_2eproto);
  return file_level_enum_descriptors_pb_2fserver_2eproto[1];
}
bool StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 10001:
    case 10101:
    case 10102:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Vertex::_Internal {
 public:
};

Vertex::Vertex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.Vertex)
}
Vertex::Vertex(const Vertex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.Vertex)
}

inline void Vertex::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vertex::~Vertex() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.Vertex)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vertex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vertex::ArenaDtor(void* object) {
  Vertex* _this = reinterpret_cast< Vertex* >(object);
  (void)_this;
}
void Vertex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vertex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vertex::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.Vertex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vertex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vertex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.Vertex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.Vertex)
  return target;
}

size_t Vertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.Vertex)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vertex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vertex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vertex::GetClassData() const { return &_class_data_; }

void Vertex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vertex *>(to)->MergeFrom(
      static_cast<const Vertex &>(from));
}


void Vertex::MergeFrom(const Vertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.Vertex)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vertex::CopyFrom(const Vertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vertex::IsInitialized() const {
  return true;
}

void Vertex::InternalSwap(Vertex* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vertex, y_)
      + sizeof(Vertex::y_)
      - PROTOBUF_FIELD_OFFSET(Vertex, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vertex::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pb_2fserver_2eproto_getter, &descriptor_table_pb_2fserver_2eproto_once,
      file_level_metadata_pb_2fserver_2eproto[0]);
}

// ===================================================================

class Size::_Internal {
 public:
};

Size::Size(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.Size)
}
Size::Size(const Size& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.Size)
}

inline void Size::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

Size::~Size() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.Size)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Size::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Size::ArenaDtor(void* object) {
  Size* _this = reinterpret_cast< Size* >(object);
  (void)_this;
}
void Size::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Size::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Size::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.Size)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Size::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Size::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.Size)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.Size)
  return target;
}

size_t Size::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.Size)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Size::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Size::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Size::GetClassData() const { return &_class_data_; }

void Size::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Size *>(to)->MergeFrom(
      static_cast<const Size &>(from));
}


void Size::MergeFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.Size)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Size::CopyFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size::IsInitialized() const {
  return true;
}

void Size::InternalSwap(Size* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Size, height_)
      + sizeof(Size::height_)
      - PROTOBUF_FIELD_OFFSET(Size, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Size::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pb_2fserver_2eproto_getter, &descriptor_table_pb_2fserver_2eproto_once,
      file_level_metadata_pb_2fserver_2eproto[1]);
}

// ===================================================================

class BoundingPoly::_Internal {
 public:
};

BoundingPoly::BoundingPoly(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vertices_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.BoundingPoly)
}
BoundingPoly::BoundingPoly(const BoundingPoly& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertices_(from.vertices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.BoundingPoly)
}

inline void BoundingPoly::SharedCtor() {
}

BoundingPoly::~BoundingPoly() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.BoundingPoly)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BoundingPoly::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BoundingPoly::ArenaDtor(void* object) {
  BoundingPoly* _this = reinterpret_cast< BoundingPoly* >(object);
  (void)_this;
}
void BoundingPoly::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundingPoly::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoundingPoly::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.BoundingPoly)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundingPoly::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.sekirocc.face_service.Vertex vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoundingPoly::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.BoundingPoly)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.sekirocc.face_service.Vertex vertices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.BoundingPoly)
  return target;
}

size_t BoundingPoly::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.BoundingPoly)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.sekirocc.face_service.Vertex vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoundingPoly::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoundingPoly::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoundingPoly::GetClassData() const { return &_class_data_; }

void BoundingPoly::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoundingPoly *>(to)->MergeFrom(
      static_cast<const BoundingPoly &>(from));
}


void BoundingPoly::MergeFrom(const BoundingPoly& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.BoundingPoly)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoundingPoly::CopyFrom(const BoundingPoly& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.BoundingPoly)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingPoly::IsInitialized() const {
  return true;
}

void BoundingPoly::InternalSwap(BoundingPoly* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundingPoly::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pb_2fserver_2eproto_getter, &descriptor_table_pb_2fserver_2eproto_once,
      file_level_metadata_pb_2fserver_2eproto[2]);
}

// ===================================================================

class Image::_Internal {
 public:
};

Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  format_ = from.format_;
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.Image)
}

inline void Image::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
format_ = 0;
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.Image)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Image::ArenaDtor(void* object) {
  Image* _this = reinterpret_cast< Image* >(object);
  (void)_this;
}
void Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  format_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.face_service.ImageFormat format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::com::sekirocc::face_service::ImageFormat>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.face_service.ImageFormat format = 1;
  if (this->_internal_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_format(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .com.sekirocc.face_service.ImageFormat format = 1;
  if (this->_internal_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Image::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Image::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Image::GetClassData() const { return &_class_data_; }

void Image::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Image *>(to)->MergeFrom(
      static_cast<const Image &>(from));
}


void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.Image)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_format() != 0) {
    _internal_set_format(from._internal_format());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(format_, other->format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pb_2fserver_2eproto_getter, &descriptor_table_pb_2fserver_2eproto_once,
      file_level_metadata_pb_2fserver_2eproto[3]);
}

// ===================================================================

class FaceDetectRequest::_Internal {
 public:
  static const ::com::sekirocc::face_service::Image& image(const FaceDetectRequest* msg);
};

const ::com::sekirocc::face_service::Image&
FaceDetectRequest::_Internal::image(const FaceDetectRequest* msg) {
  return *msg->image_;
}
FaceDetectRequest::FaceDetectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.FaceDetectRequest)
}
FaceDetectRequest::FaceDetectRequest(const FaceDetectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::com::sekirocc::face_service::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.FaceDetectRequest)
}

inline void FaceDetectRequest::SharedCtor() {
image_ = nullptr;
}

FaceDetectRequest::~FaceDetectRequest() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.FaceDetectRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FaceDetectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete image_;
}

void FaceDetectRequest::ArenaDtor(void* object) {
  FaceDetectRequest* _this = reinterpret_cast< FaceDetectRequest* >(object);
  (void)_this;
}
void FaceDetectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FaceDetectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FaceDetectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.FaceDetectRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceDetectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.face_service.Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaceDetectRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.FaceDetectRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.face_service.Image image = 1;
  if (this->_internal_has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::image(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.FaceDetectRequest)
  return target;
}

size_t FaceDetectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.FaceDetectRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.sekirocc.face_service.Image image = 1;
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaceDetectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FaceDetectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaceDetectRequest::GetClassData() const { return &_class_data_; }

void FaceDetectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FaceDetectRequest *>(to)->MergeFrom(
      static_cast<const FaceDetectRequest &>(from));
}


void FaceDetectRequest::MergeFrom(const FaceDetectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.FaceDetectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_image()) {
    _internal_mutable_image()->::com::sekirocc::face_service::Image::MergeFrom(from._internal_image());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaceDetectRequest::CopyFrom(const FaceDetectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.FaceDetectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceDetectRequest::IsInitialized() const {
  return true;
}

void FaceDetectRequest::InternalSwap(FaceDetectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(image_, other->image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceDetectRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pb_2fserver_2eproto_getter, &descriptor_table_pb_2fserver_2eproto_once,
      file_level_metadata_pb_2fserver_2eproto[4]);
}

// ===================================================================

class BatchDetectRequest::_Internal {
 public:
};

BatchDetectRequest::BatchDetectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  requests_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.BatchDetectRequest)
}
BatchDetectRequest::BatchDetectRequest(const BatchDetectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.BatchDetectRequest)
}

inline void BatchDetectRequest::SharedCtor() {
}

BatchDetectRequest::~BatchDetectRequest() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.BatchDetectRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchDetectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatchDetectRequest::ArenaDtor(void* object) {
  BatchDetectRequest* _this = reinterpret_cast< BatchDetectRequest* >(object);
  (void)_this;
}
void BatchDetectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchDetectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchDetectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.BatchDetectRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchDetectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.sekirocc.face_service.FaceDetectRequest requests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchDetectRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.BatchDetectRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.sekirocc.face_service.FaceDetectRequest requests = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.BatchDetectRequest)
  return target;
}

size_t BatchDetectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.BatchDetectRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.sekirocc.face_service.FaceDetectRequest requests = 1;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchDetectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchDetectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchDetectRequest::GetClassData() const { return &_class_data_; }

void BatchDetectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatchDetectRequest *>(to)->MergeFrom(
      static_cast<const BatchDetectRequest &>(from));
}


void BatchDetectRequest::MergeFrom(const BatchDetectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.BatchDetectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchDetectRequest::CopyFrom(const BatchDetectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.BatchDetectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchDetectRequest::IsInitialized() const {
  return true;
}

void BatchDetectRequest::InternalSwap(BatchDetectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchDetectRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pb_2fserver_2eproto_getter, &descriptor_table_pb_2fserver_2eproto_once,
      file_level_metadata_pb_2fserver_2eproto[5]);
}

// ===================================================================

class Result::_Internal {
 public:
};

Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&code_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.Result)
}

inline void Result::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&code_)) + sizeof(status_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.Result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Result::ArenaDtor(void* object) {
  Result* _this = reinterpret_cast< Result* >(object);
  (void)_this;
}
void Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmpty();
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&code_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.sekirocc.face_service.Result.error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .com.sekirocc.face_service.StatusCode status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::com::sekirocc::face_service::StatusCode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string error = 2;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.sekirocc.face_service.Result.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // .com.sekirocc.face_service.StatusCode status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  // .com.sekirocc.face_service.StatusCode status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Result::GetClassData() const { return &_class_data_; }

void Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Result *>(to)->MergeFrom(
      static_cast<const Result &>(from));
}


void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.Result)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, lhs_arena,
      &other->error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Result, status_)
      + sizeof(Result::status_)
      - PROTOBUF_FIELD_OFFSET(Result, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pb_2fserver_2eproto_getter, &descriptor_table_pb_2fserver_2eproto_once,
      file_level_metadata_pb_2fserver_2eproto[6]);
}

// ===================================================================

class FaceFeature::_Internal {
 public:
};

FaceFeature::FaceFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.FaceFeature)
}
FaceFeature::FaceFeature(const FaceFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    blob_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blob().empty()) {
    blob_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blob(), 
      GetArenaForAllocation());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.FaceFeature)
}

inline void FaceFeature::SharedCtor() {
blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  blob_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_ = 0;
}

FaceFeature::~FaceFeature() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.FaceFeature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FaceFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FaceFeature::ArenaDtor(void* object) {
  FaceFeature* _this = reinterpret_cast< FaceFeature* >(object);
  (void)_this;
}
void FaceFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FaceFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FaceFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.FaceFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blob_.ClearToEmpty();
  version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes blob = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaceFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.FaceFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes blob = 1;
  if (!this->_internal_blob().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_blob(), target);
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.FaceFeature)
  return target;
}

size_t FaceFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.FaceFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes blob = 1;
  if (!this->_internal_blob().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blob());
  }

  // int32 version = 2;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaceFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FaceFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaceFeature::GetClassData() const { return &_class_data_; }

void FaceFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FaceFeature *>(to)->MergeFrom(
      static_cast<const FaceFeature &>(from));
}


void FaceFeature::MergeFrom(const FaceFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.FaceFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_blob().empty()) {
    _internal_set_blob(from._internal_blob());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaceFeature::CopyFrom(const FaceFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.FaceFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceFeature::IsInitialized() const {
  return true;
}

void FaceFeature::InternalSwap(FaceFeature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &blob_, lhs_arena,
      &other->blob_, rhs_arena
  );
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceFeature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pb_2fserver_2eproto_getter, &descriptor_table_pb_2fserver_2eproto_once,
      file_level_metadata_pb_2fserver_2eproto[7]);
}

// ===================================================================

class FaceObject::_Internal {
 public:
  static const ::com::sekirocc::face_service::BoundingPoly& rectangle(const FaceObject* msg);
  static const ::com::sekirocc::face_service::FaceFeature& feature(const FaceObject* msg);
};

const ::com::sekirocc::face_service::BoundingPoly&
FaceObject::_Internal::rectangle(const FaceObject* msg) {
  return *msg->rectangle_;
}
const ::com::sekirocc::face_service::FaceFeature&
FaceObject::_Internal::feature(const FaceObject* msg) {
  return *msg->feature_;
}
FaceObject::FaceObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  landmarks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.FaceObject)
}
FaceObject::FaceObject(const FaceObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      landmarks_(from.landmarks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rectangle()) {
    rectangle_ = new ::com::sekirocc::face_service::BoundingPoly(*from.rectangle_);
  } else {
    rectangle_ = nullptr;
  }
  if (from._internal_has_feature()) {
    feature_ = new ::com::sekirocc::face_service::FaceFeature(*from.feature_);
  } else {
    feature_ = nullptr;
  }
  ::memcpy(&quality_, &from.quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&face_score_) -
    reinterpret_cast<char*>(&quality_)) + sizeof(face_score_));
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.FaceObject)
}

inline void FaceObject::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rectangle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&face_score_) -
    reinterpret_cast<char*>(&rectangle_)) + sizeof(face_score_));
}

FaceObject::~FaceObject() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.FaceObject)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FaceObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete rectangle_;
  if (this != internal_default_instance()) delete feature_;
}

void FaceObject::ArenaDtor(void* object) {
  FaceObject* _this = reinterpret_cast< FaceObject* >(object);
  (void)_this;
}
void FaceObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FaceObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FaceObject::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.FaceObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmarks_.Clear();
  if (GetArenaForAllocation() == nullptr && rectangle_ != nullptr) {
    delete rectangle_;
  }
  rectangle_ = nullptr;
  if (GetArenaForAllocation() == nullptr && feature_ != nullptr) {
    delete feature_;
  }
  feature_ = nullptr;
  ::memset(&quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_score_) -
      reinterpret_cast<char*>(&quality_)) + sizeof(face_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float quality = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .com.sekirocc.face_service.BoundingPoly rectangle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rectangle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .com.sekirocc.face_service.Vertex landmarks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_landmarks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // float face_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          face_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .com.sekirocc.face_service.FaceFeature feature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaceObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.FaceObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float quality = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_quality = this->_internal_quality();
  uint32_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_quality(), target);
  }

  // .com.sekirocc.face_service.BoundingPoly rectangle = 2;
  if (this->_internal_has_rectangle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rectangle(this), target, stream);
  }

  // repeated .com.sekirocc.face_service.Vertex landmarks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_landmarks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_landmarks(i), target, stream);
  }

  // float face_score = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_face_score = this->_internal_face_score();
  uint32_t raw_face_score;
  memcpy(&raw_face_score, &tmp_face_score, sizeof(tmp_face_score));
  if (raw_face_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_face_score(), target);
  }

  // .com.sekirocc.face_service.FaceFeature feature = 5;
  if (this->_internal_has_feature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::feature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.FaceObject)
  return target;
}

size_t FaceObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.FaceObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.sekirocc.face_service.Vertex landmarks = 3;
  total_size += 1UL * this->_internal_landmarks_size();
  for (const auto& msg : this->landmarks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .com.sekirocc.face_service.BoundingPoly rectangle = 2;
  if (this->_internal_has_rectangle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rectangle_);
  }

  // .com.sekirocc.face_service.FaceFeature feature = 5;
  if (this->_internal_has_feature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *feature_);
  }

  // float quality = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_quality = this->_internal_quality();
  uint32_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    total_size += 1 + 4;
  }

  // float face_score = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_face_score = this->_internal_face_score();
  uint32_t raw_face_score;
  memcpy(&raw_face_score, &tmp_face_score, sizeof(tmp_face_score));
  if (raw_face_score != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaceObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FaceObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaceObject::GetClassData() const { return &_class_data_; }

void FaceObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FaceObject *>(to)->MergeFrom(
      static_cast<const FaceObject &>(from));
}


void FaceObject::MergeFrom(const FaceObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.FaceObject)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  landmarks_.MergeFrom(from.landmarks_);
  if (from._internal_has_rectangle()) {
    _internal_mutable_rectangle()->::com::sekirocc::face_service::BoundingPoly::MergeFrom(from._internal_rectangle());
  }
  if (from._internal_has_feature()) {
    _internal_mutable_feature()->::com::sekirocc::face_service::FaceFeature::MergeFrom(from._internal_feature());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_quality = from._internal_quality();
  uint32_t raw_quality;
  memcpy(&raw_quality, &tmp_quality, sizeof(tmp_quality));
  if (raw_quality != 0) {
    _internal_set_quality(from._internal_quality());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_face_score = from._internal_face_score();
  uint32_t raw_face_score;
  memcpy(&raw_face_score, &tmp_face_score, sizeof(tmp_face_score));
  if (raw_face_score != 0) {
    _internal_set_face_score(from._internal_face_score());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaceObject::CopyFrom(const FaceObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.FaceObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceObject::IsInitialized() const {
  return true;
}

void FaceObject::InternalSwap(FaceObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  landmarks_.InternalSwap(&other->landmarks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FaceObject, face_score_)
      + sizeof(FaceObject::face_score_)
      - PROTOBUF_FIELD_OFFSET(FaceObject, rectangle_)>(
          reinterpret_cast<char*>(&rectangle_),
          reinterpret_cast<char*>(&other->rectangle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pb_2fserver_2eproto_getter, &descriptor_table_pb_2fserver_2eproto_once,
      file_level_metadata_pb_2fserver_2eproto[8]);
}

// ===================================================================

class ObjectInfo::_Internal {
 public:
  static const ::com::sekirocc::face_service::FaceObject& face(const ObjectInfo* msg);
};

const ::com::sekirocc::face_service::FaceObject&
ObjectInfo::_Internal::face(const ObjectInfo* msg) {
  return *msg->face_;
}
ObjectInfo::ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.ObjectInfo)
}
ObjectInfo::ObjectInfo(const ObjectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_face()) {
    face_ = new ::com::sekirocc::face_service::FaceObject(*from.face_);
  } else {
    face_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.ObjectInfo)
}

inline void ObjectInfo::SharedCtor() {
face_ = nullptr;
}

ObjectInfo::~ObjectInfo() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.ObjectInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObjectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete face_;
}

void ObjectInfo::ArenaDtor(void* object) {
  ObjectInfo* _this = reinterpret_cast< ObjectInfo* >(object);
  (void)_this;
}
void ObjectInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.ObjectInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && face_ != nullptr) {
    delete face_;
  }
  face_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.sekirocc.face_service.FaceObject face = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_face(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.ObjectInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.sekirocc.face_service.FaceObject face = 1;
  if (this->_internal_has_face()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::face(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.ObjectInfo)
  return target;
}

size_t ObjectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.ObjectInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.sekirocc.face_service.FaceObject face = 1;
  if (this->_internal_has_face()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectInfo::GetClassData() const { return &_class_data_; }

void ObjectInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObjectInfo *>(to)->MergeFrom(
      static_cast<const ObjectInfo &>(from));
}


void ObjectInfo::MergeFrom(const ObjectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.ObjectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_face()) {
    _internal_mutable_face()->::com::sekirocc::face_service::FaceObject::MergeFrom(from._internal_face());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectInfo::CopyFrom(const ObjectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.ObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectInfo::IsInitialized() const {
  return true;
}

void ObjectInfo::InternalSwap(ObjectInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(face_, other->face_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pb_2fserver_2eproto_getter, &descriptor_table_pb_2fserver_2eproto_once,
      file_level_metadata_pb_2fserver_2eproto[9]);
}

// ===================================================================

class FaceDetectResponse::_Internal {
 public:
};

FaceDetectResponse::FaceDetectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  face_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.FaceDetectResponse)
}
FaceDetectResponse::FaceDetectResponse(const FaceDetectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      face_info_(from.face_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.FaceDetectResponse)
}

inline void FaceDetectResponse::SharedCtor() {
}

FaceDetectResponse::~FaceDetectResponse() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.FaceDetectResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FaceDetectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FaceDetectResponse::ArenaDtor(void* object) {
  FaceDetectResponse* _this = reinterpret_cast< FaceDetectResponse* >(object);
  (void)_this;
}
void FaceDetectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FaceDetectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FaceDetectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.FaceDetectResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  face_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceDetectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.sekirocc.face_service.ObjectInfo face_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_face_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaceDetectResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.FaceDetectResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.sekirocc.face_service.ObjectInfo face_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_face_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_face_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.FaceDetectResponse)
  return target;
}

size_t FaceDetectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.FaceDetectResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.sekirocc.face_service.ObjectInfo face_info = 1;
  total_size += 1UL * this->_internal_face_info_size();
  for (const auto& msg : this->face_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaceDetectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FaceDetectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaceDetectResponse::GetClassData() const { return &_class_data_; }

void FaceDetectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FaceDetectResponse *>(to)->MergeFrom(
      static_cast<const FaceDetectResponse &>(from));
}


void FaceDetectResponse::MergeFrom(const FaceDetectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.FaceDetectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  face_info_.MergeFrom(from.face_info_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaceDetectResponse::CopyFrom(const FaceDetectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.FaceDetectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceDetectResponse::IsInitialized() const {
  return true;
}

void FaceDetectResponse::InternalSwap(FaceDetectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  face_info_.InternalSwap(&other->face_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceDetectResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pb_2fserver_2eproto_getter, &descriptor_table_pb_2fserver_2eproto_once,
      file_level_metadata_pb_2fserver_2eproto[10]);
}

// ===================================================================

class BatchDetectResponse::_Internal {
 public:
};

BatchDetectResponse::BatchDetectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  results_(arena),
  responses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:com.sekirocc.face_service.BatchDetectResponse)
}
BatchDetectResponse::BatchDetectResponse(const BatchDetectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.sekirocc.face_service.BatchDetectResponse)
}

inline void BatchDetectResponse::SharedCtor() {
}

BatchDetectResponse::~BatchDetectResponse() {
  // @@protoc_insertion_point(destructor:com.sekirocc.face_service.BatchDetectResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchDetectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatchDetectResponse::ArenaDtor(void* object) {
  BatchDetectResponse* _this = reinterpret_cast< BatchDetectResponse* >(object);
  (void)_this;
}
void BatchDetectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchDetectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchDetectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.sekirocc.face_service.BatchDetectResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  responses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchDetectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.sekirocc.face_service.Result results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.sekirocc.face_service.FaceDetectResponse responses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchDetectResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sekirocc.face_service.BatchDetectResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.sekirocc.face_service.Result results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  // repeated .com.sekirocc.face_service.FaceDetectResponse responses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sekirocc.face_service.BatchDetectResponse)
  return target;
}

size_t BatchDetectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.sekirocc.face_service.BatchDetectResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.sekirocc.face_service.Result results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.sekirocc.face_service.FaceDetectResponse responses = 2;
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchDetectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchDetectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchDetectResponse::GetClassData() const { return &_class_data_; }

void BatchDetectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatchDetectResponse *>(to)->MergeFrom(
      static_cast<const BatchDetectResponse &>(from));
}


void BatchDetectResponse::MergeFrom(const BatchDetectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.sekirocc.face_service.BatchDetectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  responses_.MergeFrom(from.responses_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchDetectResponse::CopyFrom(const BatchDetectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.sekirocc.face_service.BatchDetectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchDetectResponse::IsInitialized() const {
  return true;
}

void BatchDetectResponse::InternalSwap(BatchDetectResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  responses_.InternalSwap(&other->responses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchDetectResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pb_2fserver_2eproto_getter, &descriptor_table_pb_2fserver_2eproto_once,
      file_level_metadata_pb_2fserver_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace face_service
}  // namespace sekirocc
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::Vertex* Arena::CreateMaybeMessage< ::com::sekirocc::face_service::Vertex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::Vertex >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::Size* Arena::CreateMaybeMessage< ::com::sekirocc::face_service::Size >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::Size >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::BoundingPoly* Arena::CreateMaybeMessage< ::com::sekirocc::face_service::BoundingPoly >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::BoundingPoly >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::Image* Arena::CreateMaybeMessage< ::com::sekirocc::face_service::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::FaceDetectRequest* Arena::CreateMaybeMessage< ::com::sekirocc::face_service::FaceDetectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::FaceDetectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::BatchDetectRequest* Arena::CreateMaybeMessage< ::com::sekirocc::face_service::BatchDetectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::BatchDetectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::Result* Arena::CreateMaybeMessage< ::com::sekirocc::face_service::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::FaceFeature* Arena::CreateMaybeMessage< ::com::sekirocc::face_service::FaceFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::FaceFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::FaceObject* Arena::CreateMaybeMessage< ::com::sekirocc::face_service::FaceObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::FaceObject >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::ObjectInfo* Arena::CreateMaybeMessage< ::com::sekirocc::face_service::ObjectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::ObjectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::FaceDetectResponse* Arena::CreateMaybeMessage< ::com::sekirocc::face_service::FaceDetectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::FaceDetectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::sekirocc::face_service::BatchDetectResponse* Arena::CreateMaybeMessage< ::com::sekirocc::face_service::BatchDetectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::sekirocc::face_service::BatchDetectResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
